// Auto-generated. Do not edit!

// (in-package irobot_fcpp_simul.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let defecto = require('./defecto.js');

//-----------------------------------------------------------

class ComputeDefectsDecompResult {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.defecto = null;
    }
    else {
      if (initObj.hasOwnProperty('defecto')) {
        this.defecto = initObj.defecto
      }
      else {
        this.defecto = new defecto();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ComputeDefectsDecompResult
    // Serialize message field [defecto]
    bufferOffset = defecto.serialize(obj.defecto, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ComputeDefectsDecompResult
    let len;
    let data = new ComputeDefectsDecompResult(null);
    // Deserialize message field [defecto]
    data.defecto = defecto.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += defecto.getMessageSize(object.defecto);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'irobot_fcpp_simul/ComputeDefectsDecompResult';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '22caf6dd4a633288d6ebf2e3f7f2ed76';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the result
    defecto defecto
    
    ================================================================================
    MSG: irobot_fcpp_simul/defecto
    geometry_msgs/Polygon ros_poly
    defecto_zona[] defecto_divpor_zonas
    
    bool reparado
    
    ================================================================================
    MSG: geometry_msgs/Polygon
    #A specification of a polygon where the first and last points are assumed to be connected
    Point32[] points
    
    ================================================================================
    MSG: geometry_msgs/Point32
    # This contains the position of a point in free space(with 32 bits of precision).
    # It is recommeded to use Point wherever possible instead of Point32.  
    # 
    # This recommendation is to promote interoperability.  
    #
    # This message is designed to take up less space when sending
    # lots of points at once, as in the case of a PointCloud.  
    
    float32 x
    float32 y
    float32 z
    ================================================================================
    MSG: irobot_fcpp_simul/defecto_zona
    geometry_msgs/Polygon ros_poly
    defecto_simple[] trap_vec
    
    int32 direccion_rep
    bool reparado
    int32 zona
    
    ================================================================================
    MSG: irobot_fcpp_simul/defecto_simple
    geometry_msgs/Polygon ros_poly
    int32 direccion_rep
    bool reparado
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ComputeDefectsDecompResult(null);
    if (msg.defecto !== undefined) {
      resolved.defecto = defecto.Resolve(msg.defecto)
    }
    else {
      resolved.defecto = new defecto()
    }

    return resolved;
    }
};

module.exports = ComputeDefectsDecompResult;
