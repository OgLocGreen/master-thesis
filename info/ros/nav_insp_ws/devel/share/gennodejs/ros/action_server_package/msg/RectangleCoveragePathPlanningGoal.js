// Auto-generated. Do not edit!

// (in-package action_server_package.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class RectangleCoveragePathPlanningGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.long_rectangle = null;
      this.width_rectangle = null;
      this.step = null;
      this.dist_lr = null;
      this.width_laser = null;
    }
    else {
      if (initObj.hasOwnProperty('long_rectangle')) {
        this.long_rectangle = initObj.long_rectangle
      }
      else {
        this.long_rectangle = 0.0;
      }
      if (initObj.hasOwnProperty('width_rectangle')) {
        this.width_rectangle = initObj.width_rectangle
      }
      else {
        this.width_rectangle = 0.0;
      }
      if (initObj.hasOwnProperty('step')) {
        this.step = initObj.step
      }
      else {
        this.step = 0.0;
      }
      if (initObj.hasOwnProperty('dist_lr')) {
        this.dist_lr = initObj.dist_lr
      }
      else {
        this.dist_lr = 0.0;
      }
      if (initObj.hasOwnProperty('width_laser')) {
        this.width_laser = initObj.width_laser
      }
      else {
        this.width_laser = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type RectangleCoveragePathPlanningGoal
    // Serialize message field [long_rectangle]
    bufferOffset = _serializer.float32(obj.long_rectangle, buffer, bufferOffset);
    // Serialize message field [width_rectangle]
    bufferOffset = _serializer.float32(obj.width_rectangle, buffer, bufferOffset);
    // Serialize message field [step]
    bufferOffset = _serializer.float32(obj.step, buffer, bufferOffset);
    // Serialize message field [dist_lr]
    bufferOffset = _serializer.float32(obj.dist_lr, buffer, bufferOffset);
    // Serialize message field [width_laser]
    bufferOffset = _serializer.float32(obj.width_laser, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type RectangleCoveragePathPlanningGoal
    let len;
    let data = new RectangleCoveragePathPlanningGoal(null);
    // Deserialize message field [long_rectangle]
    data.long_rectangle = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [width_rectangle]
    data.width_rectangle = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [step]
    data.step = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [dist_lr]
    data.dist_lr = _deserializer.float32(buffer, bufferOffset);
    // Deserialize message field [width_laser]
    data.width_laser = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    return 20;
  }

  static datatype() {
    // Returns string type for a message object
    return 'action_server_package/RectangleCoveragePathPlanningGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'fb214e6b9016e277d4f4a781e958ab46';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    float32 long_rectangle
    float32 width_rectangle
    float32 step
    float32 dist_lr
    float32 width_laser
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new RectangleCoveragePathPlanningGoal(null);
    if (msg.long_rectangle !== undefined) {
      resolved.long_rectangle = msg.long_rectangle;
    }
    else {
      resolved.long_rectangle = 0.0
    }

    if (msg.width_rectangle !== undefined) {
      resolved.width_rectangle = msg.width_rectangle;
    }
    else {
      resolved.width_rectangle = 0.0
    }

    if (msg.step !== undefined) {
      resolved.step = msg.step;
    }
    else {
      resolved.step = 0.0
    }

    if (msg.dist_lr !== undefined) {
      resolved.dist_lr = msg.dist_lr;
    }
    else {
      resolved.dist_lr = 0.0
    }

    if (msg.width_laser !== undefined) {
      resolved.width_laser = msg.width_laser;
    }
    else {
      resolved.width_laser = 0.0
    }

    return resolved;
    }
};

module.exports = RectangleCoveragePathPlanningGoal;
