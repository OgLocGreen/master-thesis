# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/FCPP_inRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FCPP_inRequest(genpy.Message):
  _md5sum = "ab3c84f8b5d4cbb9d71b6a57611e603a"
  _type = "irobot_fcpp_simul/FCPP_inRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id_input
bool get_working_zones
bool get_inspection_zones
bool get_rot_zone
"""
  __slots__ = ['id_input','get_working_zones','get_inspection_zones','get_rot_zone']
  _slot_types = ['int32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id_input,get_working_zones,get_inspection_zones,get_rot_zone

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_inRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id_input is None:
        self.id_input = 0
      if self.get_working_zones is None:
        self.get_working_zones = False
      if self.get_inspection_zones is None:
        self.get_inspection_zones = False
      if self.get_rot_zone is None:
        self.get_rot_zone = False
    else:
      self.id_input = 0
      self.get_working_zones = False
      self.get_inspection_zones = False
      self.get_rot_zone = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3B().pack(_x.id_input, _x.get_working_zones, _x.get_inspection_zones, _x.get_rot_zone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.id_input, _x.get_working_zones, _x.get_inspection_zones, _x.get_rot_zone,) = _get_struct_i3B().unpack(str[start:end])
      self.get_working_zones = bool(self.get_working_zones)
      self.get_inspection_zones = bool(self.get_inspection_zones)
      self.get_rot_zone = bool(self.get_rot_zone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3B().pack(_x.id_input, _x.get_working_zones, _x.get_inspection_zones, _x.get_rot_zone))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.id_input, _x.get_working_zones, _x.get_inspection_zones, _x.get_rot_zone,) = _get_struct_i3B().unpack(str[start:end])
      self.get_working_zones = bool(self.get_working_zones)
      self.get_inspection_zones = bool(self.get_inspection_zones)
      self.get_rot_zone = bool(self.get_rot_zone)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3B = None
def _get_struct_i3B():
    global _struct_i3B
    if _struct_i3B is None:
        _struct_i3B = struct.Struct("<i3B")
    return _struct_i3B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/FCPP_inResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class FCPP_inResponse(genpy.Message):
  _md5sum = "4a6d5622fc972a91f6327482e4705f63"
  _type = "irobot_fcpp_simul/FCPP_inResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
int32 n_defects


float32 herr_lat
float32 herr_proa
float32 herr_popa


float32 long_robotx
float32 long_roboty
float32 tras_herrx
float32 tras_herry


float32 xmin_chapa
float32 xmax_chapa
float32 ymin_chapa
float32 ymax_chapa


geometry_msgs/Polygon poly_i


geometry_msgs/Polygon zone0
geometry_msgs/Polygon zone90
geometry_msgs/Polygon zone180
geometry_msgs/Polygon zone270



geometry_msgs/Polygon zone_rot



================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['n_defects','herr_lat','herr_proa','herr_popa','long_robotx','long_roboty','tras_herrx','tras_herry','xmin_chapa','xmax_chapa','ymin_chapa','ymax_chapa','poly_i','zone0','zone90','zone180','zone270','zone_rot']
  _slot_types = ['int32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       n_defects,herr_lat,herr_proa,herr_popa,long_robotx,long_roboty,tras_herrx,tras_herry,xmin_chapa,xmax_chapa,ymin_chapa,ymax_chapa,poly_i,zone0,zone90,zone180,zone270,zone_rot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_inResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.n_defects is None:
        self.n_defects = 0
      if self.herr_lat is None:
        self.herr_lat = 0.
      if self.herr_proa is None:
        self.herr_proa = 0.
      if self.herr_popa is None:
        self.herr_popa = 0.
      if self.long_robotx is None:
        self.long_robotx = 0.
      if self.long_roboty is None:
        self.long_roboty = 0.
      if self.tras_herrx is None:
        self.tras_herrx = 0.
      if self.tras_herry is None:
        self.tras_herry = 0.
      if self.xmin_chapa is None:
        self.xmin_chapa = 0.
      if self.xmax_chapa is None:
        self.xmax_chapa = 0.
      if self.ymin_chapa is None:
        self.ymin_chapa = 0.
      if self.ymax_chapa is None:
        self.ymax_chapa = 0.
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.zone0 is None:
        self.zone0 = geometry_msgs.msg.Polygon()
      if self.zone90 is None:
        self.zone90 = geometry_msgs.msg.Polygon()
      if self.zone180 is None:
        self.zone180 = geometry_msgs.msg.Polygon()
      if self.zone270 is None:
        self.zone270 = geometry_msgs.msg.Polygon()
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
    else:
      self.n_defects = 0
      self.herr_lat = 0.
      self.herr_proa = 0.
      self.herr_popa = 0.
      self.long_robotx = 0.
      self.long_roboty = 0.
      self.tras_herrx = 0.
      self.tras_herry = 0.
      self.xmin_chapa = 0.
      self.xmax_chapa = 0.
      self.ymin_chapa = 0.
      self.ymax_chapa = 0.
      self.poly_i = geometry_msgs.msg.Polygon()
      self.zone0 = geometry_msgs.msg.Polygon()
      self.zone90 = geometry_msgs.msg.Polygon()
      self.zone180 = geometry_msgs.msg.Polygon()
      self.zone270 = geometry_msgs.msg.Polygon()
      self.zone_rot = geometry_msgs.msg.Polygon()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i11f().pack(_x.n_defects, _x.herr_lat, _x.herr_proa, _x.herr_popa, _x.long_robotx, _x.long_roboty, _x.tras_herrx, _x.tras_herry, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone_rot.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone_rot.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.zone0 is None:
        self.zone0 = geometry_msgs.msg.Polygon()
      if self.zone90 is None:
        self.zone90 = geometry_msgs.msg.Polygon()
      if self.zone180 is None:
        self.zone180 = geometry_msgs.msg.Polygon()
      if self.zone270 is None:
        self.zone270 = geometry_msgs.msg.Polygon()
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.n_defects, _x.herr_lat, _x.herr_proa, _x.herr_popa, _x.long_robotx, _x.long_roboty, _x.tras_herrx, _x.tras_herry, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa,) = _get_struct_i11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone_rot.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone_rot.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i11f().pack(_x.n_defects, _x.herr_lat, _x.herr_proa, _x.herr_popa, _x.long_robotx, _x.long_roboty, _x.tras_herrx, _x.tras_herry, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zone_rot.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone_rot.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.zone0 is None:
        self.zone0 = geometry_msgs.msg.Polygon()
      if self.zone90 is None:
        self.zone90 = geometry_msgs.msg.Polygon()
      if self.zone180 is None:
        self.zone180 = geometry_msgs.msg.Polygon()
      if self.zone270 is None:
        self.zone270 = geometry_msgs.msg.Polygon()
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.n_defects, _x.herr_lat, _x.herr_proa, _x.herr_popa, _x.long_robotx, _x.long_roboty, _x.tras_herrx, _x.tras_herry, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa,) = _get_struct_i11f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone_rot.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone_rot.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_i11f = None
def _get_struct_i11f():
    global _struct_i11f
    if _struct_i11f is None:
        _struct_i11f = struct.Struct("<i11f")
    return _struct_i11f
class FCPP_in(object):
  _type          = 'irobot_fcpp_simul/FCPP_in'
  _md5sum = '26aa20be26a641c44400aa9da8ffcd13'
  _request_class  = FCPP_inRequest
  _response_class = FCPP_inResponse
