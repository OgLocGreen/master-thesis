# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/IROBOT_ir_dataRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class IROBOT_ir_dataRequest(genpy.Message):
  _md5sum = "910dac130eb554fea27a7f95622859e6"
  _type = "irobot_fcpp_simul/IROBOT_ir_dataRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool load_inputdata
bool load_polygon

bool get_input_data
bool get_working_zonesh
bool get_working_zonesc
bool get_inspection_zones
bool get_rot_zone


bool compute_adquireimgs
bool compute_panorama
bool merge_panoramas
bool compute_detectpolys

bool compute_fcpp_defect_i
bool compute_fcpp_zone_i
bool compute_fcpp_inspection_zone_i

bool execute_fcpp_defect_i
bool execute_fcpp_zone_i

bool change_defect_reparation_goal
bool change_inspection_goal


bool get_poly_i
bool get_defect_i
bool get_defect_path

bool get_inspection_i
bool get_inspection_path

bool activate_vizs


float32 long_robotx
float32 long_roboty


float32 long_herrx
float32 long_herry
float32 tras_herrx
float32 tras_herry


float32 long_camx
float32 long_camy
float32 tras_camx
float32 tras_camy


float32 long_areax
float32 long_areay


geometry_msgs/Polygon input_poly


int32 id_poly


int32 id_defecto
int32 id_defect_repair


int32 id_zona


string path_panorama



================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['load_inputdata','load_polygon','get_input_data','get_working_zonesh','get_working_zonesc','get_inspection_zones','get_rot_zone','compute_adquireimgs','compute_panorama','merge_panoramas','compute_detectpolys','compute_fcpp_defect_i','compute_fcpp_zone_i','compute_fcpp_inspection_zone_i','execute_fcpp_defect_i','execute_fcpp_zone_i','change_defect_reparation_goal','change_inspection_goal','get_poly_i','get_defect_i','get_defect_path','get_inspection_i','get_inspection_path','activate_vizs','long_robotx','long_roboty','long_herrx','long_herry','tras_herrx','tras_herry','long_camx','long_camy','tras_camx','tras_camy','long_areax','long_areay','input_poly','id_poly','id_defecto','id_defect_repair','id_zona','path_panorama']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Polygon','int32','int32','int32','int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       load_inputdata,load_polygon,get_input_data,get_working_zonesh,get_working_zonesc,get_inspection_zones,get_rot_zone,compute_adquireimgs,compute_panorama,merge_panoramas,compute_detectpolys,compute_fcpp_defect_i,compute_fcpp_zone_i,compute_fcpp_inspection_zone_i,execute_fcpp_defect_i,execute_fcpp_zone_i,change_defect_reparation_goal,change_inspection_goal,get_poly_i,get_defect_i,get_defect_path,get_inspection_i,get_inspection_path,activate_vizs,long_robotx,long_roboty,long_herrx,long_herry,tras_herrx,tras_herry,long_camx,long_camy,tras_camx,tras_camy,long_areax,long_areay,input_poly,id_poly,id_defecto,id_defect_repair,id_zona,path_panorama

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IROBOT_ir_dataRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.load_inputdata is None:
        self.load_inputdata = False
      if self.load_polygon is None:
        self.load_polygon = False
      if self.get_input_data is None:
        self.get_input_data = False
      if self.get_working_zonesh is None:
        self.get_working_zonesh = False
      if self.get_working_zonesc is None:
        self.get_working_zonesc = False
      if self.get_inspection_zones is None:
        self.get_inspection_zones = False
      if self.get_rot_zone is None:
        self.get_rot_zone = False
      if self.compute_adquireimgs is None:
        self.compute_adquireimgs = False
      if self.compute_panorama is None:
        self.compute_panorama = False
      if self.merge_panoramas is None:
        self.merge_panoramas = False
      if self.compute_detectpolys is None:
        self.compute_detectpolys = False
      if self.compute_fcpp_defect_i is None:
        self.compute_fcpp_defect_i = False
      if self.compute_fcpp_zone_i is None:
        self.compute_fcpp_zone_i = False
      if self.compute_fcpp_inspection_zone_i is None:
        self.compute_fcpp_inspection_zone_i = False
      if self.execute_fcpp_defect_i is None:
        self.execute_fcpp_defect_i = False
      if self.execute_fcpp_zone_i is None:
        self.execute_fcpp_zone_i = False
      if self.change_defect_reparation_goal is None:
        self.change_defect_reparation_goal = False
      if self.change_inspection_goal is None:
        self.change_inspection_goal = False
      if self.get_poly_i is None:
        self.get_poly_i = False
      if self.get_defect_i is None:
        self.get_defect_i = False
      if self.get_defect_path is None:
        self.get_defect_path = False
      if self.get_inspection_i is None:
        self.get_inspection_i = False
      if self.get_inspection_path is None:
        self.get_inspection_path = False
      if self.activate_vizs is None:
        self.activate_vizs = False
      if self.long_robotx is None:
        self.long_robotx = 0.
      if self.long_roboty is None:
        self.long_roboty = 0.
      if self.long_herrx is None:
        self.long_herrx = 0.
      if self.long_herry is None:
        self.long_herry = 0.
      if self.tras_herrx is None:
        self.tras_herrx = 0.
      if self.tras_herry is None:
        self.tras_herry = 0.
      if self.long_camx is None:
        self.long_camx = 0.
      if self.long_camy is None:
        self.long_camy = 0.
      if self.tras_camx is None:
        self.tras_camx = 0.
      if self.tras_camy is None:
        self.tras_camy = 0.
      if self.long_areax is None:
        self.long_areax = 0.
      if self.long_areay is None:
        self.long_areay = 0.
      if self.input_poly is None:
        self.input_poly = geometry_msgs.msg.Polygon()
      if self.id_poly is None:
        self.id_poly = 0
      if self.id_defecto is None:
        self.id_defecto = 0
      if self.id_defect_repair is None:
        self.id_defect_repair = 0
      if self.id_zona is None:
        self.id_zona = 0
      if self.path_panorama is None:
        self.path_panorama = ''
    else:
      self.load_inputdata = False
      self.load_polygon = False
      self.get_input_data = False
      self.get_working_zonesh = False
      self.get_working_zonesc = False
      self.get_inspection_zones = False
      self.get_rot_zone = False
      self.compute_adquireimgs = False
      self.compute_panorama = False
      self.merge_panoramas = False
      self.compute_detectpolys = False
      self.compute_fcpp_defect_i = False
      self.compute_fcpp_zone_i = False
      self.compute_fcpp_inspection_zone_i = False
      self.execute_fcpp_defect_i = False
      self.execute_fcpp_zone_i = False
      self.change_defect_reparation_goal = False
      self.change_inspection_goal = False
      self.get_poly_i = False
      self.get_defect_i = False
      self.get_defect_path = False
      self.get_inspection_i = False
      self.get_inspection_path = False
      self.activate_vizs = False
      self.long_robotx = 0.
      self.long_roboty = 0.
      self.long_herrx = 0.
      self.long_herry = 0.
      self.tras_herrx = 0.
      self.tras_herry = 0.
      self.long_camx = 0.
      self.long_camy = 0.
      self.tras_camx = 0.
      self.tras_camy = 0.
      self.long_areax = 0.
      self.long_areay = 0.
      self.input_poly = geometry_msgs.msg.Polygon()
      self.id_poly = 0
      self.id_defecto = 0
      self.id_defect_repair = 0
      self.id_zona = 0
      self.path_panorama = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_24B12f().pack(_x.load_inputdata, _x.load_polygon, _x.get_input_data, _x.get_working_zonesh, _x.get_working_zonesc, _x.get_inspection_zones, _x.get_rot_zone, _x.compute_adquireimgs, _x.compute_panorama, _x.merge_panoramas, _x.compute_detectpolys, _x.compute_fcpp_defect_i, _x.compute_fcpp_zone_i, _x.compute_fcpp_inspection_zone_i, _x.execute_fcpp_defect_i, _x.execute_fcpp_zone_i, _x.change_defect_reparation_goal, _x.change_inspection_goal, _x.get_poly_i, _x.get_defect_i, _x.get_defect_path, _x.get_inspection_i, _x.get_inspection_path, _x.activate_vizs, _x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay))
      length = len(self.input_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4i().pack(_x.id_poly, _x.id_defecto, _x.id_defect_repair, _x.id_zona))
      _x = self.path_panorama
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_poly is None:
        self.input_poly = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.load_inputdata, _x.load_polygon, _x.get_input_data, _x.get_working_zonesh, _x.get_working_zonesc, _x.get_inspection_zones, _x.get_rot_zone, _x.compute_adquireimgs, _x.compute_panorama, _x.merge_panoramas, _x.compute_detectpolys, _x.compute_fcpp_defect_i, _x.compute_fcpp_zone_i, _x.compute_fcpp_inspection_zone_i, _x.execute_fcpp_defect_i, _x.execute_fcpp_zone_i, _x.change_defect_reparation_goal, _x.change_inspection_goal, _x.get_poly_i, _x.get_defect_i, _x.get_defect_path, _x.get_inspection_i, _x.get_inspection_path, _x.activate_vizs, _x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay,) = _get_struct_24B12f().unpack(str[start:end])
      self.load_inputdata = bool(self.load_inputdata)
      self.load_polygon = bool(self.load_polygon)
      self.get_input_data = bool(self.get_input_data)
      self.get_working_zonesh = bool(self.get_working_zonesh)
      self.get_working_zonesc = bool(self.get_working_zonesc)
      self.get_inspection_zones = bool(self.get_inspection_zones)
      self.get_rot_zone = bool(self.get_rot_zone)
      self.compute_adquireimgs = bool(self.compute_adquireimgs)
      self.compute_panorama = bool(self.compute_panorama)
      self.merge_panoramas = bool(self.merge_panoramas)
      self.compute_detectpolys = bool(self.compute_detectpolys)
      self.compute_fcpp_defect_i = bool(self.compute_fcpp_defect_i)
      self.compute_fcpp_zone_i = bool(self.compute_fcpp_zone_i)
      self.compute_fcpp_inspection_zone_i = bool(self.compute_fcpp_inspection_zone_i)
      self.execute_fcpp_defect_i = bool(self.execute_fcpp_defect_i)
      self.execute_fcpp_zone_i = bool(self.execute_fcpp_zone_i)
      self.change_defect_reparation_goal = bool(self.change_defect_reparation_goal)
      self.change_inspection_goal = bool(self.change_inspection_goal)
      self.get_poly_i = bool(self.get_poly_i)
      self.get_defect_i = bool(self.get_defect_i)
      self.get_defect_path = bool(self.get_defect_path)
      self.get_inspection_i = bool(self.get_inspection_i)
      self.get_inspection_path = bool(self.get_inspection_path)
      self.activate_vizs = bool(self.activate_vizs)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.input_poly.points.append(val1)
      _x = self
      start = end
      end += 16
      (_x.id_poly, _x.id_defecto, _x.id_defect_repair, _x.id_zona,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_panorama = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_panorama = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_24B12f().pack(_x.load_inputdata, _x.load_polygon, _x.get_input_data, _x.get_working_zonesh, _x.get_working_zonesc, _x.get_inspection_zones, _x.get_rot_zone, _x.compute_adquireimgs, _x.compute_panorama, _x.merge_panoramas, _x.compute_detectpolys, _x.compute_fcpp_defect_i, _x.compute_fcpp_zone_i, _x.compute_fcpp_inspection_zone_i, _x.execute_fcpp_defect_i, _x.execute_fcpp_zone_i, _x.change_defect_reparation_goal, _x.change_inspection_goal, _x.get_poly_i, _x.get_defect_i, _x.get_defect_path, _x.get_inspection_i, _x.get_inspection_path, _x.activate_vizs, _x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay))
      length = len(self.input_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_4i().pack(_x.id_poly, _x.id_defecto, _x.id_defect_repair, _x.id_zona))
      _x = self.path_panorama
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.input_poly is None:
        self.input_poly = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.load_inputdata, _x.load_polygon, _x.get_input_data, _x.get_working_zonesh, _x.get_working_zonesc, _x.get_inspection_zones, _x.get_rot_zone, _x.compute_adquireimgs, _x.compute_panorama, _x.merge_panoramas, _x.compute_detectpolys, _x.compute_fcpp_defect_i, _x.compute_fcpp_zone_i, _x.compute_fcpp_inspection_zone_i, _x.execute_fcpp_defect_i, _x.execute_fcpp_zone_i, _x.change_defect_reparation_goal, _x.change_inspection_goal, _x.get_poly_i, _x.get_defect_i, _x.get_defect_path, _x.get_inspection_i, _x.get_inspection_path, _x.activate_vizs, _x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay,) = _get_struct_24B12f().unpack(str[start:end])
      self.load_inputdata = bool(self.load_inputdata)
      self.load_polygon = bool(self.load_polygon)
      self.get_input_data = bool(self.get_input_data)
      self.get_working_zonesh = bool(self.get_working_zonesh)
      self.get_working_zonesc = bool(self.get_working_zonesc)
      self.get_inspection_zones = bool(self.get_inspection_zones)
      self.get_rot_zone = bool(self.get_rot_zone)
      self.compute_adquireimgs = bool(self.compute_adquireimgs)
      self.compute_panorama = bool(self.compute_panorama)
      self.merge_panoramas = bool(self.merge_panoramas)
      self.compute_detectpolys = bool(self.compute_detectpolys)
      self.compute_fcpp_defect_i = bool(self.compute_fcpp_defect_i)
      self.compute_fcpp_zone_i = bool(self.compute_fcpp_zone_i)
      self.compute_fcpp_inspection_zone_i = bool(self.compute_fcpp_inspection_zone_i)
      self.execute_fcpp_defect_i = bool(self.execute_fcpp_defect_i)
      self.execute_fcpp_zone_i = bool(self.execute_fcpp_zone_i)
      self.change_defect_reparation_goal = bool(self.change_defect_reparation_goal)
      self.change_inspection_goal = bool(self.change_inspection_goal)
      self.get_poly_i = bool(self.get_poly_i)
      self.get_defect_i = bool(self.get_defect_i)
      self.get_defect_path = bool(self.get_defect_path)
      self.get_inspection_i = bool(self.get_inspection_i)
      self.get_inspection_path = bool(self.get_inspection_path)
      self.activate_vizs = bool(self.activate_vizs)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.input_poly.points.append(val1)
      _x = self
      start = end
      end += 16
      (_x.id_poly, _x.id_defecto, _x.id_defect_repair, _x.id_zona,) = _get_struct_4i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path_panorama = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path_panorama = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_24B12f = None
def _get_struct_24B12f():
    global _struct_24B12f
    if _struct_24B12f is None:
        _struct_24B12f = struct.Struct("<24B12f")
    return _struct_24B12f
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4i = None
def _get_struct_4i():
    global _struct_4i
    if _struct_4i is None:
        _struct_4i = struct.Struct("<4i")
    return _struct_4i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/IROBOT_ir_dataResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import irobot_fcpp_simul.msg
import std_msgs.msg

class IROBOT_ir_dataResponse(genpy.Message):
  _md5sum = "500195b88b41473a35b10da448885a4f"
  _type = "irobot_fcpp_simul/IROBOT_ir_dataResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """

float32 long_robotx
float32 long_roboty


float32 long_herrx
float32 long_herry
float32 tras_herrx
float32 tras_herry


float32 long_camx
float32 long_camy
float32 tras_camx
float32 tras_camy


float32 long_areax
float32 long_areay


geometry_msgs/Polygon zoneh0
geometry_msgs/Polygon zoneh90
geometry_msgs/Polygon zoneh180
geometry_msgs/Polygon zoneh270


geometry_msgs/Polygon zonec0
geometry_msgs/Polygon zonec90
geometry_msgs/Polygon zonec180
geometry_msgs/Polygon zonec270


geometry_msgs/PoseArray[] path_tray0
geometry_msgs/PoseArray[] path_tray90
geometry_msgs/PoseArray[] path_tray180
geometry_msgs/PoseArray[] path_tray270



geometry_msgs/Polygon zone_rot


defecto defecto_i
geometry_msgs/Polygon poly_i
int32 n_defectos

geometry_msgs/PoseArray[] defect_i_paths
geometry_msgs/PoseArray[] inspection_i_paths



================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/PoseArray
# An array of poses with a header for global reference.

Header header

Pose[] poses

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: irobot_fcpp_simul/defecto
geometry_msgs/Polygon ros_poly
defecto_zona[] defecto_divpor_zonas

bool reparado

================================================================================
MSG: irobot_fcpp_simul/defecto_zona
geometry_msgs/Polygon ros_poly
defecto_simple[] trap_vec

int32 direccion_rep
bool reparado
int32 zona

================================================================================
MSG: irobot_fcpp_simul/defecto_simple
geometry_msgs/Polygon ros_poly
int32 direccion_rep
bool reparado
"""
  __slots__ = ['long_robotx','long_roboty','long_herrx','long_herry','tras_herrx','tras_herry','long_camx','long_camy','tras_camx','tras_camy','long_areax','long_areay','zoneh0','zoneh90','zoneh180','zoneh270','zonec0','zonec90','zonec180','zonec270','path_tray0','path_tray90','path_tray180','path_tray270','zone_rot','defecto_i','poly_i','n_defectos','defect_i_paths','inspection_i_paths']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/Polygon','geometry_msgs/PoseArray[]','geometry_msgs/PoseArray[]','geometry_msgs/PoseArray[]','geometry_msgs/PoseArray[]','geometry_msgs/Polygon','irobot_fcpp_simul/defecto','geometry_msgs/Polygon','int32','geometry_msgs/PoseArray[]','geometry_msgs/PoseArray[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       long_robotx,long_roboty,long_herrx,long_herry,tras_herrx,tras_herry,long_camx,long_camy,tras_camx,tras_camy,long_areax,long_areay,zoneh0,zoneh90,zoneh180,zoneh270,zonec0,zonec90,zonec180,zonec270,path_tray0,path_tray90,path_tray180,path_tray270,zone_rot,defecto_i,poly_i,n_defectos,defect_i_paths,inspection_i_paths

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IROBOT_ir_dataResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.long_robotx is None:
        self.long_robotx = 0.
      if self.long_roboty is None:
        self.long_roboty = 0.
      if self.long_herrx is None:
        self.long_herrx = 0.
      if self.long_herry is None:
        self.long_herry = 0.
      if self.tras_herrx is None:
        self.tras_herrx = 0.
      if self.tras_herry is None:
        self.tras_herry = 0.
      if self.long_camx is None:
        self.long_camx = 0.
      if self.long_camy is None:
        self.long_camy = 0.
      if self.tras_camx is None:
        self.tras_camx = 0.
      if self.tras_camy is None:
        self.tras_camy = 0.
      if self.long_areax is None:
        self.long_areax = 0.
      if self.long_areay is None:
        self.long_areay = 0.
      if self.zoneh0 is None:
        self.zoneh0 = geometry_msgs.msg.Polygon()
      if self.zoneh90 is None:
        self.zoneh90 = geometry_msgs.msg.Polygon()
      if self.zoneh180 is None:
        self.zoneh180 = geometry_msgs.msg.Polygon()
      if self.zoneh270 is None:
        self.zoneh270 = geometry_msgs.msg.Polygon()
      if self.zonec0 is None:
        self.zonec0 = geometry_msgs.msg.Polygon()
      if self.zonec90 is None:
        self.zonec90 = geometry_msgs.msg.Polygon()
      if self.zonec180 is None:
        self.zonec180 = geometry_msgs.msg.Polygon()
      if self.zonec270 is None:
        self.zonec270 = geometry_msgs.msg.Polygon()
      if self.path_tray0 is None:
        self.path_tray0 = []
      if self.path_tray90 is None:
        self.path_tray90 = []
      if self.path_tray180 is None:
        self.path_tray180 = []
      if self.path_tray270 is None:
        self.path_tray270 = []
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
      if self.defecto_i is None:
        self.defecto_i = irobot_fcpp_simul.msg.defecto()
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.n_defectos is None:
        self.n_defectos = 0
      if self.defect_i_paths is None:
        self.defect_i_paths = []
      if self.inspection_i_paths is None:
        self.inspection_i_paths = []
    else:
      self.long_robotx = 0.
      self.long_roboty = 0.
      self.long_herrx = 0.
      self.long_herry = 0.
      self.tras_herrx = 0.
      self.tras_herry = 0.
      self.long_camx = 0.
      self.long_camy = 0.
      self.tras_camx = 0.
      self.tras_camy = 0.
      self.long_areax = 0.
      self.long_areay = 0.
      self.zoneh0 = geometry_msgs.msg.Polygon()
      self.zoneh90 = geometry_msgs.msg.Polygon()
      self.zoneh180 = geometry_msgs.msg.Polygon()
      self.zoneh270 = geometry_msgs.msg.Polygon()
      self.zonec0 = geometry_msgs.msg.Polygon()
      self.zonec90 = geometry_msgs.msg.Polygon()
      self.zonec180 = geometry_msgs.msg.Polygon()
      self.zonec270 = geometry_msgs.msg.Polygon()
      self.path_tray0 = []
      self.path_tray90 = []
      self.path_tray180 = []
      self.path_tray270 = []
      self.zone_rot = geometry_msgs.msg.Polygon()
      self.defecto_i = irobot_fcpp_simul.msg.defecto()
      self.poly_i = geometry_msgs.msg.Polygon()
      self.n_defectos = 0
      self.defect_i_paths = []
      self.inspection_i_paths = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay))
      length = len(self.zoneh0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.path_tray0)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray0:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v3 = val2.position
          _x = _v3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v4 = val2.orientation
          _x = _v4
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray90)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray90:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v7 = val2.position
          _x = _v7
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v8 = val2.orientation
          _x = _v8
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray180)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray180:
        _v9 = val1.header
        _x = _v9.seq
        buff.write(_get_struct_I().pack(_x))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v11 = val2.position
          _x = _v11
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v12 = val2.orientation
          _x = _v12
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray270)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray270:
        _v13 = val1.header
        _x = _v13.seq
        buff.write(_get_struct_I().pack(_x))
        _v14 = _v13.stamp
        _x = _v14
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v13.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v15 = val2.position
          _x = _v15
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v16 = val2.orientation
          _x = _v16
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.zone_rot.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone_rot.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.defecto_i.ros_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_i.ros_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.defecto_i.defecto_divpor_zonas)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_i.defecto_divpor_zonas:
        _v17 = val1.ros_poly
        length = len(_v17.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v17.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.trap_vec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trap_vec:
          _v18 = val2.ros_poly
          length = len(_v18.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v18.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
        _x = val1
        buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
      _x = self.defecto_i.reparado
      buff.write(_get_struct_B().pack(_x))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.n_defectos
      buff.write(_get_struct_i().pack(_x))
      length = len(self.defect_i_paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.defect_i_paths:
        _v19 = val1.header
        _x = _v19.seq
        buff.write(_get_struct_I().pack(_x))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v21 = val2.position
          _x = _v21
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v22 = val2.orientation
          _x = _v22
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.inspection_i_paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.inspection_i_paths:
        _v23 = val1.header
        _x = _v23.seq
        buff.write(_get_struct_I().pack(_x))
        _v24 = _v23.stamp
        _x = _v24
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v23.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v25 = val2.position
          _x = _v25
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v26 = val2.orientation
          _x = _v26
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zoneh0 is None:
        self.zoneh0 = geometry_msgs.msg.Polygon()
      if self.zoneh90 is None:
        self.zoneh90 = geometry_msgs.msg.Polygon()
      if self.zoneh180 is None:
        self.zoneh180 = geometry_msgs.msg.Polygon()
      if self.zoneh270 is None:
        self.zoneh270 = geometry_msgs.msg.Polygon()
      if self.zonec0 is None:
        self.zonec0 = geometry_msgs.msg.Polygon()
      if self.zonec90 is None:
        self.zonec90 = geometry_msgs.msg.Polygon()
      if self.zonec180 is None:
        self.zonec180 = geometry_msgs.msg.Polygon()
      if self.zonec270 is None:
        self.zonec270 = geometry_msgs.msg.Polygon()
      if self.path_tray0 is None:
        self.path_tray0 = None
      if self.path_tray90 is None:
        self.path_tray90 = None
      if self.path_tray180 is None:
        self.path_tray180 = None
      if self.path_tray270 is None:
        self.path_tray270 = None
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
      if self.defecto_i is None:
        self.defecto_i = irobot_fcpp_simul.msg.defecto()
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.defect_i_paths is None:
        self.defect_i_paths = None
      if self.inspection_i_paths is None:
        self.inspection_i_paths = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay,) = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v27 = val1.header
        start = end
        end += 4
        (_v27.seq,) = _get_struct_I().unpack(str[start:end])
        _v28 = _v27.stamp
        _x = _v28
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v27.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v27.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v29 = val2.position
          _x = _v29
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v30 = val2.orientation
          _x = _v30
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray90 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v31 = val1.header
        start = end
        end += 4
        (_v31.seq,) = _get_struct_I().unpack(str[start:end])
        _v32 = _v31.stamp
        _x = _v32
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v31.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v31.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v33 = val2.position
          _x = _v33
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v34 = val2.orientation
          _x = _v34
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray90.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray180 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v35 = val1.header
        start = end
        end += 4
        (_v35.seq,) = _get_struct_I().unpack(str[start:end])
        _v36 = _v35.stamp
        _x = _v36
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v35.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v35.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v37 = val2.position
          _x = _v37
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v38 = val2.orientation
          _x = _v38
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray180.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray270 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v39 = val1.header
        start = end
        end += 4
        (_v39.seq,) = _get_struct_I().unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v39.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v41 = val2.position
          _x = _v41
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v42 = val2.orientation
          _x = _v42
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray270.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone_rot.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone_rot.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_i.ros_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.defecto_i.ros_poly.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_i.defecto_divpor_zonas = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto_zona()
        _v43 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v43.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v43.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trap_vec = []
        for i in range(0, length):
          val2 = irobot_fcpp_simul.msg.defecto_simple()
          _v44 = val2.ros_poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v44.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v44.points.append(val4)
          _x = val2
          start = end
          end += 5
          (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
          val2.reparado = bool(val2.reparado)
          val1.trap_vec.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.defecto_i.defecto_divpor_zonas.append(val1)
      start = end
      end += 1
      (self.defecto_i.reparado,) = _get_struct_B().unpack(str[start:end])
      self.defecto_i.reparado = bool(self.defecto_i.reparado)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (self.n_defectos,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defect_i_paths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v45 = val1.header
        start = end
        end += 4
        (_v45.seq,) = _get_struct_I().unpack(str[start:end])
        _v46 = _v45.stamp
        _x = _v46
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v45.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v45.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v47 = val2.position
          _x = _v47
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v48 = val2.orientation
          _x = _v48
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.defect_i_paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.inspection_i_paths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v49 = val1.header
        start = end
        end += 4
        (_v49.seq,) = _get_struct_I().unpack(str[start:end])
        _v50 = _v49.stamp
        _x = _v50
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v49.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v49.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v51 = val2.position
          _x = _v51
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v52 = val2.orientation
          _x = _v52
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.inspection_i_paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay))
      length = len(self.zoneh0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoneh270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoneh270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec0.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec0.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec90.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec90.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec180.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec180.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zonec270.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zonec270.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.path_tray0)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray0:
        _v53 = val1.header
        _x = _v53.seq
        buff.write(_get_struct_I().pack(_x))
        _v54 = _v53.stamp
        _x = _v54
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v53.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v55 = val2.position
          _x = _v55
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v56 = val2.orientation
          _x = _v56
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray90)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray90:
        _v57 = val1.header
        _x = _v57.seq
        buff.write(_get_struct_I().pack(_x))
        _v58 = _v57.stamp
        _x = _v58
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v57.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v59 = val2.position
          _x = _v59
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v60 = val2.orientation
          _x = _v60
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray180)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray180:
        _v61 = val1.header
        _x = _v61.seq
        buff.write(_get_struct_I().pack(_x))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v63 = val2.position
          _x = _v63
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v64 = val2.orientation
          _x = _v64
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.path_tray270)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_tray270:
        _v65 = val1.header
        _x = _v65.seq
        buff.write(_get_struct_I().pack(_x))
        _v66 = _v65.stamp
        _x = _v66
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v65.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v67 = val2.position
          _x = _v67
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v68 = val2.orientation
          _x = _v68
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.zone_rot.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zone_rot.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.defecto_i.ros_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_i.ros_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.defecto_i.defecto_divpor_zonas)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_i.defecto_divpor_zonas:
        _v69 = val1.ros_poly
        length = len(_v69.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v69.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.trap_vec)
        buff.write(_struct_I.pack(length))
        for val2 in val1.trap_vec:
          _v70 = val2.ros_poly
          length = len(_v70.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v70.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          _x = val2
          buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
        _x = val1
        buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
      _x = self.defecto_i.reparado
      buff.write(_get_struct_B().pack(_x))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.n_defectos
      buff.write(_get_struct_i().pack(_x))
      length = len(self.defect_i_paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.defect_i_paths:
        _v71 = val1.header
        _x = _v71.seq
        buff.write(_get_struct_I().pack(_x))
        _v72 = _v71.stamp
        _x = _v72
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v71.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v73 = val2.position
          _x = _v73
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v74 = val2.orientation
          _x = _v74
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.inspection_i_paths)
      buff.write(_struct_I.pack(length))
      for val1 in self.inspection_i_paths:
        _v75 = val1.header
        _x = _v75.seq
        buff.write(_get_struct_I().pack(_x))
        _v76 = _v75.stamp
        _x = _v76
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v75.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v77 = val2.position
          _x = _v77
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
          _v78 = val2.orientation
          _x = _v78
          buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.zoneh0 is None:
        self.zoneh0 = geometry_msgs.msg.Polygon()
      if self.zoneh90 is None:
        self.zoneh90 = geometry_msgs.msg.Polygon()
      if self.zoneh180 is None:
        self.zoneh180 = geometry_msgs.msg.Polygon()
      if self.zoneh270 is None:
        self.zoneh270 = geometry_msgs.msg.Polygon()
      if self.zonec0 is None:
        self.zonec0 = geometry_msgs.msg.Polygon()
      if self.zonec90 is None:
        self.zonec90 = geometry_msgs.msg.Polygon()
      if self.zonec180 is None:
        self.zonec180 = geometry_msgs.msg.Polygon()
      if self.zonec270 is None:
        self.zonec270 = geometry_msgs.msg.Polygon()
      if self.path_tray0 is None:
        self.path_tray0 = None
      if self.path_tray90 is None:
        self.path_tray90 = None
      if self.path_tray180 is None:
        self.path_tray180 = None
      if self.path_tray270 is None:
        self.path_tray270 = None
      if self.zone_rot is None:
        self.zone_rot = geometry_msgs.msg.Polygon()
      if self.defecto_i is None:
        self.defecto_i = irobot_fcpp_simul.msg.defecto()
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.defect_i_paths is None:
        self.defect_i_paths = None
      if self.inspection_i_paths is None:
        self.inspection_i_paths = None
      end = 0
      _x = self
      start = end
      end += 48
      (_x.long_robotx, _x.long_roboty, _x.long_herrx, _x.long_herry, _x.tras_herrx, _x.tras_herry, _x.long_camx, _x.long_camy, _x.tras_camx, _x.tras_camy, _x.long_areax, _x.long_areay,) = _get_struct_12f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoneh270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoneh270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec0.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec0.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec90.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec90.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec180.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec180.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zonec270.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zonec270.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray0 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v79 = val1.header
        start = end
        end += 4
        (_v79.seq,) = _get_struct_I().unpack(str[start:end])
        _v80 = _v79.stamp
        _x = _v80
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v79.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v79.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v81 = val2.position
          _x = _v81
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v82 = val2.orientation
          _x = _v82
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray0.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray90 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v83 = val1.header
        start = end
        end += 4
        (_v83.seq,) = _get_struct_I().unpack(str[start:end])
        _v84 = _v83.stamp
        _x = _v84
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v83.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v83.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v85 = val2.position
          _x = _v85
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v86 = val2.orientation
          _x = _v86
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray90.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray180 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v87 = val1.header
        start = end
        end += 4
        (_v87.seq,) = _get_struct_I().unpack(str[start:end])
        _v88 = _v87.stamp
        _x = _v88
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v87.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v87.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v89 = val2.position
          _x = _v89
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v90 = val2.orientation
          _x = _v90
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray180.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_tray270 = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v91 = val1.header
        start = end
        end += 4
        (_v91.seq,) = _get_struct_I().unpack(str[start:end])
        _v92 = _v91.stamp
        _x = _v92
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v91.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v91.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v93 = val2.position
          _x = _v93
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v94 = val2.orientation
          _x = _v94
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.path_tray270.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zone_rot.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zone_rot.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_i.ros_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.defecto_i.ros_poly.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_i.defecto_divpor_zonas = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto_zona()
        _v95 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v95.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v95.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.trap_vec = []
        for i in range(0, length):
          val2 = irobot_fcpp_simul.msg.defecto_simple()
          _v96 = val2.ros_poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v96.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v96.points.append(val4)
          _x = val2
          start = end
          end += 5
          (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
          val2.reparado = bool(val2.reparado)
          val1.trap_vec.append(val2)
        _x = val1
        start = end
        end += 9
        (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.defecto_i.defecto_divpor_zonas.append(val1)
      start = end
      end += 1
      (self.defecto_i.reparado,) = _get_struct_B().unpack(str[start:end])
      self.defecto_i.reparado = bool(self.defecto_i.reparado)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (self.n_defectos,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defect_i_paths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v97 = val1.header
        start = end
        end += 4
        (_v97.seq,) = _get_struct_I().unpack(str[start:end])
        _v98 = _v97.stamp
        _x = _v98
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v97.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v97.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v99 = val2.position
          _x = _v99
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v100 = val2.orientation
          _x = _v100
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.defect_i_paths.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.inspection_i_paths = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.PoseArray()
        _v101 = val1.header
        start = end
        end += 4
        (_v101.seq,) = _get_struct_I().unpack(str[start:end])
        _v102 = _v101.stamp
        _x = _v102
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v101.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v101.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v103 = val2.position
          _x = _v103
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v104 = val2.orientation
          _x = _v104
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
          val1.poses.append(val2)
        self.inspection_i_paths.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi
class IROBOT_ir_data(object):
  _type          = 'irobot_fcpp_simul/IROBOT_ir_data'
  _md5sum = 'ae9b2e14b3730f735edbdd6f2ac13cb8'
  _request_class  = IROBOT_ir_dataRequest
  _response_class = IROBOT_ir_dataResponse
