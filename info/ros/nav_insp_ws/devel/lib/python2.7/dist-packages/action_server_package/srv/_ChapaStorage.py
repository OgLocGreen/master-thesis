# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/ChapaStorageRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ChapaStorageRequest(genpy.Message):
  _md5sum = "747a0498f8850f71ea5801b4c738596f"
  _type = "action_server_package/ChapaStorageRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id_chapa
"""
  __slots__ = ['id_chapa']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id_chapa

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChapaStorageRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id_chapa is None:
        self.id_chapa = 0
    else:
      self.id_chapa = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id_chapa
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id_chapa,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id_chapa
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id_chapa,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/ChapaStorageResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ChapaStorageResponse(genpy.Message):
  _md5sum = "5aae4cddd2d81a64c074397519c7dd87"
  _type = "action_server_package/ChapaStorageResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 long_chapa
float32 width_chapa

geometry_msgs/Point coordA
geometry_msgs/Point coordB
geometry_msgs/Point coordC
geometry_msgs/Point coordD

int32 number_of_chapas

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['long_chapa','width_chapa','coordA','coordB','coordC','coordD','number_of_chapas']
  _slot_types = ['float32','float32','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','geometry_msgs/Point','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       long_chapa,width_chapa,coordA,coordB,coordC,coordD,number_of_chapas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChapaStorageResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.long_chapa is None:
        self.long_chapa = 0.
      if self.width_chapa is None:
        self.width_chapa = 0.
      if self.coordA is None:
        self.coordA = geometry_msgs.msg.Point()
      if self.coordB is None:
        self.coordB = geometry_msgs.msg.Point()
      if self.coordC is None:
        self.coordC = geometry_msgs.msg.Point()
      if self.coordD is None:
        self.coordD = geometry_msgs.msg.Point()
      if self.number_of_chapas is None:
        self.number_of_chapas = 0
    else:
      self.long_chapa = 0.
      self.width_chapa = 0.
      self.coordA = geometry_msgs.msg.Point()
      self.coordB = geometry_msgs.msg.Point()
      self.coordC = geometry_msgs.msg.Point()
      self.coordD = geometry_msgs.msg.Point()
      self.number_of_chapas = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f12di().pack(_x.long_chapa, _x.width_chapa, _x.coordA.x, _x.coordA.y, _x.coordA.z, _x.coordB.x, _x.coordB.y, _x.coordB.z, _x.coordC.x, _x.coordC.y, _x.coordC.z, _x.coordD.x, _x.coordD.y, _x.coordD.z, _x.number_of_chapas))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coordA is None:
        self.coordA = geometry_msgs.msg.Point()
      if self.coordB is None:
        self.coordB = geometry_msgs.msg.Point()
      if self.coordC is None:
        self.coordC = geometry_msgs.msg.Point()
      if self.coordD is None:
        self.coordD = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.long_chapa, _x.width_chapa, _x.coordA.x, _x.coordA.y, _x.coordA.z, _x.coordB.x, _x.coordB.y, _x.coordB.z, _x.coordC.x, _x.coordC.y, _x.coordC.z, _x.coordD.x, _x.coordD.y, _x.coordD.z, _x.number_of_chapas,) = _get_struct_2f12di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f12di().pack(_x.long_chapa, _x.width_chapa, _x.coordA.x, _x.coordA.y, _x.coordA.z, _x.coordB.x, _x.coordB.y, _x.coordB.z, _x.coordC.x, _x.coordC.y, _x.coordC.z, _x.coordD.x, _x.coordD.y, _x.coordD.z, _x.number_of_chapas))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.coordA is None:
        self.coordA = geometry_msgs.msg.Point()
      if self.coordB is None:
        self.coordB = geometry_msgs.msg.Point()
      if self.coordC is None:
        self.coordC = geometry_msgs.msg.Point()
      if self.coordD is None:
        self.coordD = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 108
      (_x.long_chapa, _x.width_chapa, _x.coordA.x, _x.coordA.y, _x.coordA.z, _x.coordB.x, _x.coordB.y, _x.coordB.z, _x.coordC.x, _x.coordC.y, _x.coordC.z, _x.coordD.x, _x.coordD.y, _x.coordD.z, _x.number_of_chapas,) = _get_struct_2f12di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f12di = None
def _get_struct_2f12di():
    global _struct_2f12di
    if _struct_2f12di is None:
        _struct_2f12di = struct.Struct("<2f12di")
    return _struct_2f12di
class ChapaStorage(object):
  _type          = 'action_server_package/ChapaStorage'
  _md5sum = 'd420ea154534426ff59c21556a0bdbf4'
  _request_class  = ChapaStorageRequest
  _response_class = ChapaStorageResponse
