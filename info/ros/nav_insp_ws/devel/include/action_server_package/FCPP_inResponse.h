// Generated by gencpp from file action_server_package/FCPP_inResponse.msg
// DO NOT EDIT!


#ifndef ACTION_SERVER_PACKAGE_MESSAGE_FCPP_INRESPONSE_H
#define ACTION_SERVER_PACKAGE_MESSAGE_FCPP_INRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>

namespace action_server_package
{
template <class ContainerAllocator>
struct FCPP_inResponse_
{
  typedef FCPP_inResponse_<ContainerAllocator> Type;

  FCPP_inResponse_()
    : n_defects(0)
    , xmin_chapa(0.0)
    , xmax_chapa(0.0)
    , ymin_chapa(0.0)
    , ymax_chapa(0.0)
    , poly_i()
    , number_of_chapas(0)  {
    }
  FCPP_inResponse_(const ContainerAllocator& _alloc)
    : n_defects(0)
    , xmin_chapa(0.0)
    , xmax_chapa(0.0)
    , ymin_chapa(0.0)
    , ymax_chapa(0.0)
    , poly_i(_alloc)
    , number_of_chapas(0)  {
  (void)_alloc;
    }



   typedef int32_t _n_defects_type;
  _n_defects_type n_defects;

   typedef float _xmin_chapa_type;
  _xmin_chapa_type xmin_chapa;

   typedef float _xmax_chapa_type;
  _xmax_chapa_type xmax_chapa;

   typedef float _ymin_chapa_type;
  _ymin_chapa_type ymin_chapa;

   typedef float _ymax_chapa_type;
  _ymax_chapa_type ymax_chapa;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _poly_i_type;
  _poly_i_type poly_i;

   typedef int32_t _number_of_chapas_type;
  _number_of_chapas_type number_of_chapas;





  typedef boost::shared_ptr< ::action_server_package::FCPP_inResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::action_server_package::FCPP_inResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FCPP_inResponse_

typedef ::action_server_package::FCPP_inResponse_<std::allocator<void> > FCPP_inResponse;

typedef boost::shared_ptr< ::action_server_package::FCPP_inResponse > FCPP_inResponsePtr;
typedef boost::shared_ptr< ::action_server_package::FCPP_inResponse const> FCPP_inResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::action_server_package::FCPP_inResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace action_server_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'action_server_package': ['/home/irobot/nav_insp_ws/devel/share/action_server_package/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::action_server_package::FCPP_inResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::action_server_package::FCPP_inResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::action_server_package::FCPP_inResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92057b47e7ea13416595ec12aecf76a5";
  }

  static const char* value(const ::action_server_package::FCPP_inResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92057b47e7ea1341ULL;
  static const uint64_t static_value2 = 0x6595ec12aecf76a5ULL;
};

template<class ContainerAllocator>
struct DataType< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "action_server_package/FCPP_inResponse";
  }

  static const char* value(const ::action_server_package::FCPP_inResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 n_defects\n\
\n\
float32 xmin_chapa\n\
float32 xmax_chapa\n\
float32 ymin_chapa\n\
float32 ymax_chapa\n\
\n\
geometry_msgs/Polygon poly_i\n\
\n\
int32 number_of_chapas\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::action_server_package::FCPP_inResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n_defects);
      stream.next(m.xmin_chapa);
      stream.next(m.xmax_chapa);
      stream.next(m.ymin_chapa);
      stream.next(m.ymax_chapa);
      stream.next(m.poly_i);
      stream.next(m.number_of_chapas);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FCPP_inResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::action_server_package::FCPP_inResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::action_server_package::FCPP_inResponse_<ContainerAllocator>& v)
  {
    s << indent << "n_defects: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_defects);
    s << indent << "xmin_chapa: ";
    Printer<float>::stream(s, indent + "  ", v.xmin_chapa);
    s << indent << "xmax_chapa: ";
    Printer<float>::stream(s, indent + "  ", v.xmax_chapa);
    s << indent << "ymin_chapa: ";
    Printer<float>::stream(s, indent + "  ", v.ymin_chapa);
    s << indent << "ymax_chapa: ";
    Printer<float>::stream(s, indent + "  ", v.ymax_chapa);
    s << indent << "poly_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.poly_i);
    s << indent << "number_of_chapas: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_chapas);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTION_SERVER_PACKAGE_MESSAGE_FCPP_INRESPONSE_H
