// Generated by gencpp from file irobot_fcpp_simul/defecto.msg
// DO NOT EDIT!


#ifndef IROBOT_FCPP_SIMUL_MESSAGE_DEFECTO_H
#define IROBOT_FCPP_SIMUL_MESSAGE_DEFECTO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <irobot_fcpp_simul/defecto_zona.h>

namespace irobot_fcpp_simul
{
template <class ContainerAllocator>
struct defecto_
{
  typedef defecto_<ContainerAllocator> Type;

  defecto_()
    : ros_poly()
    , defecto_divpor_zonas()
    , reparado(false)  {
    }
  defecto_(const ContainerAllocator& _alloc)
    : ros_poly(_alloc)
    , defecto_divpor_zonas(_alloc)
    , reparado(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _ros_poly_type;
  _ros_poly_type ros_poly;

   typedef std::vector< ::irobot_fcpp_simul::defecto_zona_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::irobot_fcpp_simul::defecto_zona_<ContainerAllocator> >::other >  _defecto_divpor_zonas_type;
  _defecto_divpor_zonas_type defecto_divpor_zonas;

   typedef uint8_t _reparado_type;
  _reparado_type reparado;





  typedef boost::shared_ptr< ::irobot_fcpp_simul::defecto_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_fcpp_simul::defecto_<ContainerAllocator> const> ConstPtr;

}; // struct defecto_

typedef ::irobot_fcpp_simul::defecto_<std::allocator<void> > defecto;

typedef boost::shared_ptr< ::irobot_fcpp_simul::defecto > defectoPtr;
typedef boost::shared_ptr< ::irobot_fcpp_simul::defecto const> defectoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::irobot_fcpp_simul::defecto_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace irobot_fcpp_simul

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'irobot_fcpp_simul': ['/home/irobot/nav_insp_ws/src/inspection/irobot_fcpp_simul/msg', '/home/irobot/nav_insp_ws/devel/share/irobot_fcpp_simul/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irobot_fcpp_simul::defecto_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_fcpp_simul::defecto_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_fcpp_simul::defecto_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f4dca0cbac38a321305ee29edd2c608";
  }

  static const char* value(const ::irobot_fcpp_simul::defecto_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f4dca0cbac38a32ULL;
  static const uint64_t static_value2 = 0x1305ee29edd2c608ULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "irobot_fcpp_simul/defecto";
  }

  static const char* value(const ::irobot_fcpp_simul::defecto_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Polygon ros_poly\n\
defecto_zona[] defecto_divpor_zonas\n\
\n\
bool reparado\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: irobot_fcpp_simul/defecto_zona\n\
geometry_msgs/Polygon ros_poly\n\
defecto_simple[] trap_vec\n\
\n\
int32 direccion_rep\n\
bool reparado\n\
int32 zona\n\
\n\
================================================================================\n\
MSG: irobot_fcpp_simul/defecto_simple\n\
geometry_msgs/Polygon ros_poly\n\
int32 direccion_rep\n\
bool reparado\n\
";
  }

  static const char* value(const ::irobot_fcpp_simul::defecto_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ros_poly);
      stream.next(m.defecto_divpor_zonas);
      stream.next(m.reparado);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct defecto_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::irobot_fcpp_simul::defecto_<ContainerAllocator>& v)
  {
    s << indent << "ros_poly: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.ros_poly);
    s << indent << "defecto_divpor_zonas[]" << std::endl;
    for (size_t i = 0; i < v.defecto_divpor_zonas.size(); ++i)
    {
      s << indent << "  defecto_divpor_zonas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::irobot_fcpp_simul::defecto_zona_<ContainerAllocator> >::stream(s, indent + "    ", v.defecto_divpor_zonas[i]);
    }
    s << indent << "reparado: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reparado);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IROBOT_FCPP_SIMUL_MESSAGE_DEFECTO_H
