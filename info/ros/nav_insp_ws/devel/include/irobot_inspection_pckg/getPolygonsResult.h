// Generated by gencpp from file irobot_inspection_pckg/getPolygonsResult.msg
// DO NOT EDIT!


#ifndef IROBOT_INSPECTION_PCKG_MESSAGE_GETPOLYGONSRESULT_H
#define IROBOT_INSPECTION_PCKG_MESSAGE_GETPOLYGONSRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <irobot_inspection_pckg/polygonArray.h>

namespace irobot_inspection_pckg
{
template <class ContainerAllocator>
struct getPolygonsResult_
{
  typedef getPolygonsResult_<ContainerAllocator> Type;

  getPolygonsResult_()
    : poly_array()  {
    }
  getPolygonsResult_(const ContainerAllocator& _alloc)
    : poly_array(_alloc)  {
  (void)_alloc;
    }



   typedef  ::irobot_inspection_pckg::polygonArray_<ContainerAllocator>  _poly_array_type;
  _poly_array_type poly_array;





  typedef boost::shared_ptr< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> const> ConstPtr;

}; // struct getPolygonsResult_

typedef ::irobot_inspection_pckg::getPolygonsResult_<std::allocator<void> > getPolygonsResult;

typedef boost::shared_ptr< ::irobot_inspection_pckg::getPolygonsResult > getPolygonsResultPtr;
typedef boost::shared_ptr< ::irobot_inspection_pckg::getPolygonsResult const> getPolygonsResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace irobot_inspection_pckg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'irobot_inspection_pckg': ['/home/irobot/nav_insp_ws/src/inspection/irobot_inspection_pckg/msg', '/home/irobot/nav_insp_ws/devel/share/irobot_inspection_pckg/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c90d0d11a98d1bc55547b4c0e2bcacb";
  }

  static const char* value(const ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c90d0d11a98d1bcULL;
  static const uint64_t static_value2 = 0x55547b4c0e2bcacbULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "irobot_inspection_pckg/getPolygonsResult";
  }

  static const char* value(const ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#result definition\n\
irobot_inspection_pckg/polygonArray poly_array\n\
\n\
================================================================================\n\
MSG: irobot_inspection_pckg/polygonArray\n\
 # Details of a polygonArray.\n\
Header header\n\
geometry_msgs/Polygon[] polygons\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.poly_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getPolygonsResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::irobot_inspection_pckg::getPolygonsResult_<ContainerAllocator>& v)
  {
    s << indent << "poly_array: ";
    s << std::endl;
    Printer< ::irobot_inspection_pckg::polygonArray_<ContainerAllocator> >::stream(s, indent + "  ", v.poly_array);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IROBOT_INSPECTION_PCKG_MESSAGE_GETPOLYGONSRESULT_H
