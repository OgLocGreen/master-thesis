// Generated by gencpp from file aux_controllers/SetFrameRequest.msg
// DO NOT EDIT!


#ifndef AUX_CONTROLLERS_MESSAGE_SETFRAMEREQUEST_H
#define AUX_CONTROLLERS_MESSAGE_SETFRAMEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aux_controllers
{
template <class ContainerAllocator>
struct SetFrameRequest_
{
  typedef SetFrameRequest_<ContainerAllocator> Type;

  SetFrameRequest_()
    : ini(false)
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , rotation_roll(0.0)
    , rotation_pitch(0.0)
    , rotation_yaw(0.0)  {
    }
  SetFrameRequest_(const ContainerAllocator& _alloc)
    : ini(false)
    , origin_x(0.0)
    , origin_y(0.0)
    , origin_z(0.0)
    , rotation_roll(0.0)
    , rotation_pitch(0.0)
    , rotation_yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _ini_type;
  _ini_type ini;

   typedef float _origin_x_type;
  _origin_x_type origin_x;

   typedef float _origin_y_type;
  _origin_y_type origin_y;

   typedef float _origin_z_type;
  _origin_z_type origin_z;

   typedef float _rotation_roll_type;
  _rotation_roll_type rotation_roll;

   typedef float _rotation_pitch_type;
  _rotation_pitch_type rotation_pitch;

   typedef float _rotation_yaw_type;
  _rotation_yaw_type rotation_yaw;





  typedef boost::shared_ptr< ::aux_controllers::SetFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aux_controllers::SetFrameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetFrameRequest_

typedef ::aux_controllers::SetFrameRequest_<std::allocator<void> > SetFrameRequest;

typedef boost::shared_ptr< ::aux_controllers::SetFrameRequest > SetFrameRequestPtr;
typedef boost::shared_ptr< ::aux_controllers::SetFrameRequest const> SetFrameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aux_controllers::SetFrameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aux_controllers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aux_controllers::SetFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aux_controllers::SetFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aux_controllers::SetFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d774e3446069c0f841b542eafae6a351";
  }

  static const char* value(const ::aux_controllers::SetFrameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd774e3446069c0f8ULL;
  static const uint64_t static_value2 = 0x41b542eafae6a351ULL;
};

template<class ContainerAllocator>
struct DataType< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aux_controllers/SetFrameRequest";
  }

  static const char* value(const ::aux_controllers::SetFrameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ini\n\
\n\
float32 origin_x\n\
float32 origin_y\n\
float32 origin_z\n\
\n\
float32 rotation_roll\n\
float32 rotation_pitch\n\
float32 rotation_yaw\n\
\n\
";
  }

  static const char* value(const ::aux_controllers::SetFrameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ini);
      stream.next(m.origin_x);
      stream.next(m.origin_y);
      stream.next(m.origin_z);
      stream.next(m.rotation_roll);
      stream.next(m.rotation_pitch);
      stream.next(m.rotation_yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetFrameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aux_controllers::SetFrameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aux_controllers::SetFrameRequest_<ContainerAllocator>& v)
  {
    s << indent << "ini: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ini);
    s << indent << "origin_x: ";
    Printer<float>::stream(s, indent + "  ", v.origin_x);
    s << indent << "origin_y: ";
    Printer<float>::stream(s, indent + "  ", v.origin_y);
    s << indent << "origin_z: ";
    Printer<float>::stream(s, indent + "  ", v.origin_z);
    s << indent << "rotation_roll: ";
    Printer<float>::stream(s, indent + "  ", v.rotation_roll);
    s << indent << "rotation_pitch: ";
    Printer<float>::stream(s, indent + "  ", v.rotation_pitch);
    s << indent << "rotation_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.rotation_yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUX_CONTROLLERS_MESSAGE_SETFRAMEREQUEST_H
