// Auto-generated. Do not edit!

// (in-package irobot_fcpp_simul.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class ExecuteRectangleFCPPGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.rectangle_id = null;
      this.operation_type = null;
      this.rectangle = null;
    }
    else {
      if (initObj.hasOwnProperty('rectangle_id')) {
        this.rectangle_id = initObj.rectangle_id
      }
      else {
        this.rectangle_id = 0;
      }
      if (initObj.hasOwnProperty('operation_type')) {
        this.operation_type = initObj.operation_type
      }
      else {
        this.operation_type = 0;
      }
      if (initObj.hasOwnProperty('rectangle')) {
        this.rectangle = initObj.rectangle
      }
      else {
        this.rectangle = new geometry_msgs.msg.Polygon();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type ExecuteRectangleFCPPGoal
    // Serialize message field [rectangle_id]
    bufferOffset = _serializer.int32(obj.rectangle_id, buffer, bufferOffset);
    // Serialize message field [operation_type]
    bufferOffset = _serializer.int32(obj.operation_type, buffer, bufferOffset);
    // Serialize message field [rectangle]
    bufferOffset = geometry_msgs.msg.Polygon.serialize(obj.rectangle, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type ExecuteRectangleFCPPGoal
    let len;
    let data = new ExecuteRectangleFCPPGoal(null);
    // Deserialize message field [rectangle_id]
    data.rectangle_id = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [operation_type]
    data.operation_type = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [rectangle]
    data.rectangle = geometry_msgs.msg.Polygon.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += geometry_msgs.msg.Polygon.getMessageSize(object.rectangle);
    return length + 8;
  }

  static datatype() {
    // Returns string type for a message object
    return 'irobot_fcpp_simul/ExecuteRectangleFCPPGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '93e42b79de0e56f88bd428b2bd59ee26';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Define the goal
    #int32 chapa_id
    int32 rectangle_id #0,90,180,270
    
    int32 operation_type
    
    geometry_msgs/Polygon rectangle
    
    
    
    ================================================================================
    MSG: geometry_msgs/Polygon
    #A specification of a polygon where the first and last points are assumed to be connected
    Point32[] points
    
    ================================================================================
    MSG: geometry_msgs/Point32
    # This contains the position of a point in free space(with 32 bits of precision).
    # It is recommeded to use Point wherever possible instead of Point32.  
    # 
    # This recommendation is to promote interoperability.  
    #
    # This message is designed to take up less space when sending
    # lots of points at once, as in the case of a PointCloud.  
    
    float32 x
    float32 y
    float32 z
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new ExecuteRectangleFCPPGoal(null);
    if (msg.rectangle_id !== undefined) {
      resolved.rectangle_id = msg.rectangle_id;
    }
    else {
      resolved.rectangle_id = 0
    }

    if (msg.operation_type !== undefined) {
      resolved.operation_type = msg.operation_type;
    }
    else {
      resolved.operation_type = 0
    }

    if (msg.rectangle !== undefined) {
      resolved.rectangle = geometry_msgs.msg.Polygon.Resolve(msg.rectangle)
    }
    else {
      resolved.rectangle = new geometry_msgs.msg.Polygon()
    }

    return resolved;
    }
};

module.exports = ExecuteRectangleFCPPGoal;
