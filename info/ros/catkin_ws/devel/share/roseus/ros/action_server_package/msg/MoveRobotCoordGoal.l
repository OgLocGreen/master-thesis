;; Auto-generated. Do not edit!


(when (boundp 'action_server_package::MoveRobotCoordGoal)
  (if (not (find-package "ACTION_SERVER_PACKAGE"))
    (make-package "ACTION_SERVER_PACKAGE"))
  (shadow 'MoveRobotCoordGoal (find-package "ACTION_SERVER_PACKAGE")))
(unless (find-package "ACTION_SERVER_PACKAGE::MOVEROBOTCOORDGOAL")
  (make-package "ACTION_SERVER_PACKAGE::MOVEROBOTCOORDGOAL"))

(in-package "ROS")
;;//! \htmlinclude MoveRobotCoordGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass action_server_package::MoveRobotCoordGoal
  :super ros::object
  :slots (_movement _vel _frame ))

(defmethod action_server_package::MoveRobotCoordGoal
  (:init
   (&key
    ((:movement __movement) (instance geometry_msgs::Pose2D :init))
    ((:vel __vel) 0.0)
    ((:frame __frame) "")
    )
   (send-super :init)
   (setq _movement __movement)
   (setq _vel (float __vel))
   (setq _frame (string __frame))
   self)
  (:movement
   (&rest __movement)
   (if (keywordp (car __movement))
       (send* _movement __movement)
     (progn
       (if __movement (setq _movement (car __movement)))
       _movement)))
  (:vel
   (&optional __vel)
   (if __vel (setq _vel __vel)) _vel)
  (:frame
   (&optional __frame)
   (if __frame (setq _frame __frame)) _frame)
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose2D _movement
    (send _movement :serialization-length)
    ;; float32 _vel
    4
    ;; string _frame
    4 (length _frame)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose2D _movement
       (send _movement :serialize s)
     ;; float32 _vel
       (sys::poke _vel (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; string _frame
       (write-long (length _frame) s) (princ _frame s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose2D _movement
     (send _movement :deserialize buf ptr-) (incf ptr- (send _movement :serialization-length))
   ;; float32 _vel
     (setq _vel (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; string _frame
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _frame (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;;
   self)
  )

(setf (get action_server_package::MoveRobotCoordGoal :md5sum-) "dfe3fddf458302904dac9744b43e6d8c")
(setf (get action_server_package::MoveRobotCoordGoal :datatype-) "action_server_package/MoveRobotCoordGoal")
(setf (get action_server_package::MoveRobotCoordGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
geometry_msgs/Pose2D movement
float32 vel
string frame

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

")



(provide :action_server_package/MoveRobotCoordGoal "dfe3fddf458302904dac9744b43e6d8c")


