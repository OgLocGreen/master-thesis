# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/RectangleCoveragePathPlanningGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RectangleCoveragePathPlanningGoal(genpy.Message):
  _md5sum = "fb214e6b9016e277d4f4a781e958ab46"
  _type = "action_server_package/RectangleCoveragePathPlanningGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
float32 long_rectangle
float32 width_rectangle
float32 step
float32 dist_lr
float32 width_laser

"""
  __slots__ = ['long_rectangle','width_rectangle','step','dist_lr','width_laser']
  _slot_types = ['float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       long_rectangle,width_rectangle,step,dist_lr,width_laser

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RectangleCoveragePathPlanningGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.long_rectangle is None:
        self.long_rectangle = 0.
      if self.width_rectangle is None:
        self.width_rectangle = 0.
      if self.step is None:
        self.step = 0.
      if self.dist_lr is None:
        self.dist_lr = 0.
      if self.width_laser is None:
        self.width_laser = 0.
    else:
      self.long_rectangle = 0.
      self.width_rectangle = 0.
      self.step = 0.
      self.dist_lr = 0.
      self.width_laser = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.long_rectangle, _x.width_rectangle, _x.step, _x.dist_lr, _x.width_laser))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.long_rectangle, _x.width_rectangle, _x.step, _x.dist_lr, _x.width_laser,) = _get_struct_5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f().pack(_x.long_rectangle, _x.width_rectangle, _x.step, _x.dist_lr, _x.width_laser))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.long_rectangle, _x.width_rectangle, _x.step, _x.dist_lr, _x.width_laser,) = _get_struct_5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f = None
def _get_struct_5f():
    global _struct_5f
    if _struct_5f is None:
        _struct_5f = struct.Struct("<5f")
    return _struct_5f
