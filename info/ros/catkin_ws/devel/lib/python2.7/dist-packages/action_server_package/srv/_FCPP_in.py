# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/FCPP_inRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FCPP_inRequest(genpy.Message):
  _md5sum = "18c8679e6d3855a24222ca635f731460"
  _type = "action_server_package/FCPP_inRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 id_input
"""
  __slots__ = ['id_input']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id_input

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_inRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id_input is None:
        self.id_input = 0
    else:
      self.id_input = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.id_input
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id_input,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.id_input
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.id_input,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/FCPP_inResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class FCPP_inResponse(genpy.Message):
  _md5sum = "92057b47e7ea13416595ec12aecf76a5"
  _type = "action_server_package/FCPP_inResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 n_defects

float32 xmin_chapa
float32 xmax_chapa
float32 ymin_chapa
float32 ymax_chapa

geometry_msgs/Polygon poly_i

int32 number_of_chapas

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z"""
  __slots__ = ['n_defects','xmin_chapa','xmax_chapa','ymin_chapa','ymax_chapa','poly_i','number_of_chapas']
  _slot_types = ['int32','float32','float32','float32','float32','geometry_msgs/Polygon','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       n_defects,xmin_chapa,xmax_chapa,ymin_chapa,ymax_chapa,poly_i,number_of_chapas

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_inResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.n_defects is None:
        self.n_defects = 0
      if self.xmin_chapa is None:
        self.xmin_chapa = 0.
      if self.xmax_chapa is None:
        self.xmax_chapa = 0.
      if self.ymin_chapa is None:
        self.ymin_chapa = 0.
      if self.ymax_chapa is None:
        self.ymax_chapa = 0.
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      if self.number_of_chapas is None:
        self.number_of_chapas = 0
    else:
      self.n_defects = 0
      self.xmin_chapa = 0.
      self.xmax_chapa = 0.
      self.ymin_chapa = 0.
      self.ymax_chapa = 0.
      self.poly_i = geometry_msgs.msg.Polygon()
      self.number_of_chapas = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i4f().pack(_x.n_defects, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.number_of_chapas
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.n_defects, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa,) = _get_struct_i4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (self.number_of_chapas,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i4f().pack(_x.n_defects, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa))
      length = len(self.poly_i.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.poly_i.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      _x = self.number_of_chapas
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.poly_i is None:
        self.poly_i = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.n_defects, _x.xmin_chapa, _x.xmax_chapa, _x.ymin_chapa, _x.ymax_chapa,) = _get_struct_i4f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poly_i.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.poly_i.points.append(val1)
      start = end
      end += 4
      (self.number_of_chapas,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i4f = None
def _get_struct_i4f():
    global _struct_i4f
    if _struct_i4f is None:
        _struct_i4f = struct.Struct("<i4f")
    return _struct_i4f
class FCPP_in(object):
  _type          = 'action_server_package/FCPP_in'
  _md5sum = '3a9946ec5195dc8fb4f14eeb6ec2e339'
  _request_class  = FCPP_inRequest
  _response_class = FCPP_inResponse
