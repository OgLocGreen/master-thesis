# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from action_server_package/CompleteRectangleCoverageGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CompleteRectangleCoverageGoal(genpy.Message):
  _md5sum = "99f0c81406704524af476d87104d837e"
  _type = "action_server_package/CompleteRectangleCoverageGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the goal
float32 rect_long
float32 rect_width
float32 step
float32 dist_lr
float32 laser_width

float32 vel
"""
  __slots__ = ['rect_long','rect_width','step','dist_lr','laser_width','vel']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rect_long,rect_width,step,dist_lr,laser_width,vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CompleteRectangleCoverageGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.rect_long is None:
        self.rect_long = 0.
      if self.rect_width is None:
        self.rect_width = 0.
      if self.step is None:
        self.step = 0.
      if self.dist_lr is None:
        self.dist_lr = 0.
      if self.laser_width is None:
        self.laser_width = 0.
      if self.vel is None:
        self.vel = 0.
    else:
      self.rect_long = 0.
      self.rect_width = 0.
      self.step = 0.
      self.dist_lr = 0.
      self.laser_width = 0.
      self.vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.rect_long, _x.rect_width, _x.step, _x.dist_lr, _x.laser_width, _x.vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.rect_long, _x.rect_width, _x.step, _x.dist_lr, _x.laser_width, _x.vel,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.rect_long, _x.rect_width, _x.step, _x.dist_lr, _x.laser_width, _x.vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.rect_long, _x.rect_width, _x.step, _x.dist_lr, _x.laser_width, _x.vel,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
