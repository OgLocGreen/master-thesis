# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aux_controllers/SetFrameRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetFrameRequest(genpy.Message):
  _md5sum = "d774e3446069c0f841b542eafae6a351"
  _type = "aux_controllers/SetFrameRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ini

float32 origin_x
float32 origin_y
float32 origin_z

float32 rotation_roll
float32 rotation_pitch
float32 rotation_yaw

"""
  __slots__ = ['ini','origin_x','origin_y','origin_z','rotation_roll','rotation_pitch','rotation_yaw']
  _slot_types = ['bool','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ini,origin_x,origin_y,origin_z,rotation_roll,rotation_pitch,rotation_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetFrameRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ini is None:
        self.ini = False
      if self.origin_x is None:
        self.origin_x = 0.
      if self.origin_y is None:
        self.origin_y = 0.
      if self.origin_z is None:
        self.origin_z = 0.
      if self.rotation_roll is None:
        self.rotation_roll = 0.
      if self.rotation_pitch is None:
        self.rotation_pitch = 0.
      if self.rotation_yaw is None:
        self.rotation_yaw = 0.
    else:
      self.ini = False
      self.origin_x = 0.
      self.origin_y = 0.
      self.origin_z = 0.
      self.rotation_roll = 0.
      self.rotation_pitch = 0.
      self.rotation_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.ini, _x.origin_x, _x.origin_y, _x.origin_z, _x.rotation_roll, _x.rotation_pitch, _x.rotation_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.ini, _x.origin_x, _x.origin_y, _x.origin_z, _x.rotation_roll, _x.rotation_pitch, _x.rotation_yaw,) = _get_struct_B6f().unpack(str[start:end])
      self.ini = bool(self.ini)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B6f().pack(_x.ini, _x.origin_x, _x.origin_y, _x.origin_z, _x.rotation_roll, _x.rotation_pitch, _x.rotation_yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 25
      (_x.ini, _x.origin_x, _x.origin_y, _x.origin_z, _x.rotation_roll, _x.rotation_pitch, _x.rotation_yaw,) = _get_struct_B6f().unpack(str[start:end])
      self.ini = bool(self.ini)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B6f = None
def _get_struct_B6f():
    global _struct_B6f
    if _struct_B6f is None:
        _struct_B6f = struct.Struct("<B6f")
    return _struct_B6f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from aux_controllers/SetFrameResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SetFrameResponse(genpy.Message):
  _md5sum = "f386576e317fabd22f70a14e46dc82ae"
  _type = "aux_controllers/SetFrameResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool respond
"""
  __slots__ = ['respond']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       respond

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetFrameResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.respond is None:
        self.respond = False
    else:
      self.respond = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.respond
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.respond,) = _get_struct_B().unpack(str[start:end])
      self.respond = bool(self.respond)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.respond
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.respond,) = _get_struct_B().unpack(str[start:end])
      self.respond = bool(self.respond)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class SetFrame(object):
  _type          = 'aux_controllers/SetFrame'
  _md5sum = 'fc7b3836a679f38a5c6b9328b643f1e8'
  _request_class  = SetFrameRequest
  _response_class = SetFrameResponse
