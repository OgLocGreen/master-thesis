# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/defecto_zona.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import irobot_fcpp_simul.msg

class defecto_zona(genpy.Message):
  _md5sum = "66d6ef707c05e8c8eaa69b175e897e44"
  _type = "irobot_fcpp_simul/defecto_zona"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Polygon ros_poly
defecto_simple[] trap_vec

int32 direccion_rep
bool reparado
int32 zona

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: irobot_fcpp_simul/defecto_simple
geometry_msgs/Polygon ros_poly
int32 direccion_rep
bool reparado
"""
  __slots__ = ['ros_poly','trap_vec','direccion_rep','reparado','zona']
  _slot_types = ['geometry_msgs/Polygon','irobot_fcpp_simul/defecto_simple[]','int32','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ros_poly,trap_vec,direccion_rep,reparado,zona

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(defecto_zona, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ros_poly is None:
        self.ros_poly = geometry_msgs.msg.Polygon()
      if self.trap_vec is None:
        self.trap_vec = []
      if self.direccion_rep is None:
        self.direccion_rep = 0
      if self.reparado is None:
        self.reparado = False
      if self.zona is None:
        self.zona = 0
    else:
      self.ros_poly = geometry_msgs.msg.Polygon()
      self.trap_vec = []
      self.direccion_rep = 0
      self.reparado = False
      self.zona = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.ros_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.ros_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.trap_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.trap_vec:
        _v1 = val1.ros_poly
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ros_poly is None:
        self.ros_poly = geometry_msgs.msg.Polygon()
      if self.trap_vec is None:
        self.trap_vec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ros_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.ros_poly.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trap_vec = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto_simple()
        _v2 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v2.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v2.points.append(val3)
        _x = val1
        start = end
        end += 5
        (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.trap_vec.append(val1)
      _x = self
      start = end
      end += 9
      (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
      self.reparado = bool(self.reparado)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.ros_poly.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.ros_poly.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.trap_vec)
      buff.write(_struct_I.pack(length))
      for val1 in self.trap_vec:
        _v3 = val1.ros_poly
        length = len(_v3.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v3.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
      _x = self
      buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.ros_poly is None:
        self.ros_poly = geometry_msgs.msg.Polygon()
      if self.trap_vec is None:
        self.trap_vec = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ros_poly.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.ros_poly.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trap_vec = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto_simple()
        _v4 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v4.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v4.points.append(val3)
        _x = val1
        start = end
        end += 5
        (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.trap_vec.append(val1)
      _x = self
      start = end
      end += 9
      (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
      self.reparado = bool(self.reparado)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi
