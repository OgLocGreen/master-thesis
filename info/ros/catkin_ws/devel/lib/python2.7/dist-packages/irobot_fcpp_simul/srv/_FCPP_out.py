# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/FCPP_outRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class FCPP_outRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "irobot_fcpp_simul/FCPP_outRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_outRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from irobot_fcpp_simul/FCPP_outResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import irobot_fcpp_simul.msg

class FCPP_outResponse(genpy.Message):
  _md5sum = "30c6047a6867f6dfad71ccb5b3d8e613"
  _type = "irobot_fcpp_simul/FCPP_outResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """defecto[] defecto_out


================================================================================
MSG: irobot_fcpp_simul/defecto
geometry_msgs/Polygon ros_poly
defecto_zona[] defecto_divpor_zonas

bool reparado

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: irobot_fcpp_simul/defecto_zona
geometry_msgs/Polygon ros_poly
defecto_simple[] trap_vec

int32 direccion_rep
bool reparado
int32 zona

================================================================================
MSG: irobot_fcpp_simul/defecto_simple
geometry_msgs/Polygon ros_poly
int32 direccion_rep
bool reparado
"""
  __slots__ = ['defecto_out']
  _slot_types = ['irobot_fcpp_simul/defecto[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       defecto_out

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FCPP_outResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.defecto_out is None:
        self.defecto_out = []
    else:
      self.defecto_out = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.defecto_out)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_out:
        _v1 = val1.ros_poly
        length = len(_v1.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v1.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.defecto_divpor_zonas)
        buff.write(_struct_I.pack(length))
        for val2 in val1.defecto_divpor_zonas:
          _v2 = val2.ros_poly
          length = len(_v2.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v2.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          length = len(val2.trap_vec)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trap_vec:
            _v3 = val3.ros_poly
            length = len(_v3.points)
            buff.write(_struct_I.pack(length))
            for val5 in _v3.points:
              _x = val5
              buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
          _x = val2
          buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
        _x = val1.reparado
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.defecto_out is None:
        self.defecto_out = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_out = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto()
        _v4 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v4.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v4.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.defecto_divpor_zonas = []
        for i in range(0, length):
          val2 = irobot_fcpp_simul.msg.defecto_zona()
          _v5 = val2.ros_poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v5.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v5.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trap_vec = []
          for i in range(0, length):
            val3 = irobot_fcpp_simul.msg.defecto_simple()
            _v6 = val3.ros_poly
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v6.points = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point32()
              _x = val5
              start = end
              end += 12
              (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
              _v6.points.append(val5)
            _x = val3
            start = end
            end += 5
            (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
            val3.reparado = bool(val3.reparado)
            val2.trap_vec.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
          val2.reparado = bool(val2.reparado)
          val1.defecto_divpor_zonas.append(val2)
        start = end
        end += 1
        (val1.reparado,) = _get_struct_B().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.defecto_out.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.defecto_out)
      buff.write(_struct_I.pack(length))
      for val1 in self.defecto_out:
        _v7 = val1.ros_poly
        length = len(_v7.points)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.points:
          _x = val3
          buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        length = len(val1.defecto_divpor_zonas)
        buff.write(_struct_I.pack(length))
        for val2 in val1.defecto_divpor_zonas:
          _v8 = val2.ros_poly
          length = len(_v8.points)
          buff.write(_struct_I.pack(length))
          for val4 in _v8.points:
            _x = val4
            buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
          length = len(val2.trap_vec)
          buff.write(_struct_I.pack(length))
          for val3 in val2.trap_vec:
            _v9 = val3.ros_poly
            length = len(_v9.points)
            buff.write(_struct_I.pack(length))
            for val5 in _v9.points:
              _x = val5
              buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
            _x = val3
            buff.write(_get_struct_iB().pack(_x.direccion_rep, _x.reparado))
          _x = val2
          buff.write(_get_struct_iBi().pack(_x.direccion_rep, _x.reparado, _x.zona))
        _x = val1.reparado
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.defecto_out is None:
        self.defecto_out = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.defecto_out = []
      for i in range(0, length):
        val1 = irobot_fcpp_simul.msg.defecto()
        _v10 = val1.ros_poly
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v10.points = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point32()
          _x = val3
          start = end
          end += 12
          (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
          _v10.points.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.defecto_divpor_zonas = []
        for i in range(0, length):
          val2 = irobot_fcpp_simul.msg.defecto_zona()
          _v11 = val2.ros_poly
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          _v11.points = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point32()
            _x = val4
            start = end
            end += 12
            (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
            _v11.points.append(val4)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.trap_vec = []
          for i in range(0, length):
            val3 = irobot_fcpp_simul.msg.defecto_simple()
            _v12 = val3.ros_poly
            start = end
            end += 4
            (length,) = _struct_I.unpack(str[start:end])
            _v12.points = []
            for i in range(0, length):
              val5 = geometry_msgs.msg.Point32()
              _x = val5
              start = end
              end += 12
              (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
              _v12.points.append(val5)
            _x = val3
            start = end
            end += 5
            (_x.direccion_rep, _x.reparado,) = _get_struct_iB().unpack(str[start:end])
            val3.reparado = bool(val3.reparado)
            val2.trap_vec.append(val3)
          _x = val2
          start = end
          end += 9
          (_x.direccion_rep, _x.reparado, _x.zona,) = _get_struct_iBi().unpack(str[start:end])
          val2.reparado = bool(val2.reparado)
          val1.defecto_divpor_zonas.append(val2)
        start = end
        end += 1
        (val1.reparado,) = _get_struct_B().unpack(str[start:end])
        val1.reparado = bool(val1.reparado)
        self.defecto_out.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_iB = None
def _get_struct_iB():
    global _struct_iB
    if _struct_iB is None:
        _struct_iB = struct.Struct("<iB")
    return _struct_iB
_struct_iBi = None
def _get_struct_iBi():
    global _struct_iBi
    if _struct_iBi is None:
        _struct_iBi = struct.Struct("<iBi")
    return _struct_iBi
class FCPP_out(object):
  _type          = 'irobot_fcpp_simul/FCPP_out'
  _md5sum = '30c6047a6867f6dfad71ccb5b3d8e613'
  _request_class  = FCPP_outRequest
  _response_class = FCPP_outResponse
