// Generated by gencpp from file irobot_fcpp_simul/IROBOT_ir_dataResponse.msg
// DO NOT EDIT!


#ifndef IROBOT_FCPP_SIMUL_MESSAGE_IROBOT_IR_DATARESPONSE_H
#define IROBOT_FCPP_SIMUL_MESSAGE_IROBOT_IR_DATARESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/Polygon.h>
#include <irobot_fcpp_simul/defecto.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/PoseArray.h>
#include <geometry_msgs/PoseArray.h>

namespace irobot_fcpp_simul
{
template <class ContainerAllocator>
struct IROBOT_ir_dataResponse_
{
  typedef IROBOT_ir_dataResponse_<ContainerAllocator> Type;

  IROBOT_ir_dataResponse_()
    : long_robotx(0.0)
    , long_roboty(0.0)
    , long_herrx(0.0)
    , long_herry(0.0)
    , tras_herrx(0.0)
    , tras_herry(0.0)
    , long_camx(0.0)
    , long_camy(0.0)
    , tras_camx(0.0)
    , tras_camy(0.0)
    , long_areax(0.0)
    , long_areay(0.0)
    , zoneh0()
    , zoneh90()
    , zoneh180()
    , zoneh270()
    , zonec0()
    , zonec90()
    , zonec180()
    , zonec270()
    , path_tray0()
    , path_tray90()
    , path_tray180()
    , path_tray270()
    , zone_rot()
    , defecto_i()
    , poly_i()
    , n_defectos(0)
    , defect_i_paths()
    , inspection_i_paths()  {
    }
  IROBOT_ir_dataResponse_(const ContainerAllocator& _alloc)
    : long_robotx(0.0)
    , long_roboty(0.0)
    , long_herrx(0.0)
    , long_herry(0.0)
    , tras_herrx(0.0)
    , tras_herry(0.0)
    , long_camx(0.0)
    , long_camy(0.0)
    , tras_camx(0.0)
    , tras_camy(0.0)
    , long_areax(0.0)
    , long_areay(0.0)
    , zoneh0(_alloc)
    , zoneh90(_alloc)
    , zoneh180(_alloc)
    , zoneh270(_alloc)
    , zonec0(_alloc)
    , zonec90(_alloc)
    , zonec180(_alloc)
    , zonec270(_alloc)
    , path_tray0(_alloc)
    , path_tray90(_alloc)
    , path_tray180(_alloc)
    , path_tray270(_alloc)
    , zone_rot(_alloc)
    , defecto_i(_alloc)
    , poly_i(_alloc)
    , n_defectos(0)
    , defect_i_paths(_alloc)
    , inspection_i_paths(_alloc)  {
  (void)_alloc;
    }



   typedef float _long_robotx_type;
  _long_robotx_type long_robotx;

   typedef float _long_roboty_type;
  _long_roboty_type long_roboty;

   typedef float _long_herrx_type;
  _long_herrx_type long_herrx;

   typedef float _long_herry_type;
  _long_herry_type long_herry;

   typedef float _tras_herrx_type;
  _tras_herrx_type tras_herrx;

   typedef float _tras_herry_type;
  _tras_herry_type tras_herry;

   typedef float _long_camx_type;
  _long_camx_type long_camx;

   typedef float _long_camy_type;
  _long_camy_type long_camy;

   typedef float _tras_camx_type;
  _tras_camx_type tras_camx;

   typedef float _tras_camy_type;
  _tras_camy_type tras_camy;

   typedef float _long_areax_type;
  _long_areax_type long_areax;

   typedef float _long_areay_type;
  _long_areay_type long_areay;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zoneh0_type;
  _zoneh0_type zoneh0;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zoneh90_type;
  _zoneh90_type zoneh90;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zoneh180_type;
  _zoneh180_type zoneh180;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zoneh270_type;
  _zoneh270_type zoneh270;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zonec0_type;
  _zonec0_type zonec0;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zonec90_type;
  _zonec90_type zonec90;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zonec180_type;
  _zonec180_type zonec180;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zonec270_type;
  _zonec270_type zonec270;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _path_tray0_type;
  _path_tray0_type path_tray0;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _path_tray90_type;
  _path_tray90_type path_tray90;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _path_tray180_type;
  _path_tray180_type path_tray180;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _path_tray270_type;
  _path_tray270_type path_tray270;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _zone_rot_type;
  _zone_rot_type zone_rot;

   typedef  ::irobot_fcpp_simul::defecto_<ContainerAllocator>  _defecto_i_type;
  _defecto_i_type defecto_i;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _poly_i_type;
  _poly_i_type poly_i;

   typedef int32_t _n_defectos_type;
  _n_defectos_type n_defectos;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _defect_i_paths_type;
  _defect_i_paths_type defect_i_paths;

   typedef std::vector< ::geometry_msgs::PoseArray_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseArray_<ContainerAllocator> >::other >  _inspection_i_paths_type;
  _inspection_i_paths_type inspection_i_paths;





  typedef boost::shared_ptr< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IROBOT_ir_dataResponse_

typedef ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<std::allocator<void> > IROBOT_ir_dataResponse;

typedef boost::shared_ptr< ::irobot_fcpp_simul::IROBOT_ir_dataResponse > IROBOT_ir_dataResponsePtr;
typedef boost::shared_ptr< ::irobot_fcpp_simul::IROBOT_ir_dataResponse const> IROBOT_ir_dataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace irobot_fcpp_simul

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg', '/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'irobot_fcpp_simul': ['/home/irobot/catkin_ws/src/irobot_fcpp_simul/msg', '/home/irobot/catkin_ws/devel/share/irobot_fcpp_simul/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "500195b88b41473a35b10da448885a4f";
  }

  static const char* value(const ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x500195b88b41473aULL;
  static const uint64_t static_value2 = 0x35b10da448885a4fULL;
};

template<class ContainerAllocator>
struct DataType< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "irobot_fcpp_simul/IROBOT_ir_dataResponse";
  }

  static const char* value(const ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
float32 long_robotx\n\
float32 long_roboty\n\
\n\
\n\
float32 long_herrx\n\
float32 long_herry\n\
float32 tras_herrx\n\
float32 tras_herry\n\
\n\
\n\
float32 long_camx\n\
float32 long_camy\n\
float32 tras_camx\n\
float32 tras_camy\n\
\n\
\n\
float32 long_areax\n\
float32 long_areay\n\
\n\
\n\
geometry_msgs/Polygon zoneh0\n\
geometry_msgs/Polygon zoneh90\n\
geometry_msgs/Polygon zoneh180\n\
geometry_msgs/Polygon zoneh270\n\
\n\
\n\
geometry_msgs/Polygon zonec0\n\
geometry_msgs/Polygon zonec90\n\
geometry_msgs/Polygon zonec180\n\
geometry_msgs/Polygon zonec270\n\
\n\
\n\
geometry_msgs/PoseArray[] path_tray0\n\
geometry_msgs/PoseArray[] path_tray90\n\
geometry_msgs/PoseArray[] path_tray180\n\
geometry_msgs/PoseArray[] path_tray270\n\
\n\
\n\
\n\
geometry_msgs/Polygon zone_rot\n\
\n\
\n\
defecto defecto_i\n\
geometry_msgs/Polygon poly_i\n\
int32 n_defectos\n\
\n\
geometry_msgs/PoseArray[] defect_i_paths\n\
geometry_msgs/PoseArray[] inspection_i_paths\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/PoseArray\n\
# An array of poses with a header for global reference.\n\
\n\
Header header\n\
\n\
Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: irobot_fcpp_simul/defecto\n\
geometry_msgs/Polygon ros_poly\n\
defecto_zona[] defecto_divpor_zonas\n\
\n\
bool reparado\n\
\n\
================================================================================\n\
MSG: irobot_fcpp_simul/defecto_zona\n\
geometry_msgs/Polygon ros_poly\n\
defecto_simple[] trap_vec\n\
\n\
int32 direccion_rep\n\
bool reparado\n\
int32 zona\n\
\n\
================================================================================\n\
MSG: irobot_fcpp_simul/defecto_simple\n\
geometry_msgs/Polygon ros_poly\n\
int32 direccion_rep\n\
bool reparado\n\
";
  }

  static const char* value(const ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.long_robotx);
      stream.next(m.long_roboty);
      stream.next(m.long_herrx);
      stream.next(m.long_herry);
      stream.next(m.tras_herrx);
      stream.next(m.tras_herry);
      stream.next(m.long_camx);
      stream.next(m.long_camy);
      stream.next(m.tras_camx);
      stream.next(m.tras_camy);
      stream.next(m.long_areax);
      stream.next(m.long_areay);
      stream.next(m.zoneh0);
      stream.next(m.zoneh90);
      stream.next(m.zoneh180);
      stream.next(m.zoneh270);
      stream.next(m.zonec0);
      stream.next(m.zonec90);
      stream.next(m.zonec180);
      stream.next(m.zonec270);
      stream.next(m.path_tray0);
      stream.next(m.path_tray90);
      stream.next(m.path_tray180);
      stream.next(m.path_tray270);
      stream.next(m.zone_rot);
      stream.next(m.defecto_i);
      stream.next(m.poly_i);
      stream.next(m.n_defectos);
      stream.next(m.defect_i_paths);
      stream.next(m.inspection_i_paths);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IROBOT_ir_dataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::irobot_fcpp_simul::IROBOT_ir_dataResponse_<ContainerAllocator>& v)
  {
    s << indent << "long_robotx: ";
    Printer<float>::stream(s, indent + "  ", v.long_robotx);
    s << indent << "long_roboty: ";
    Printer<float>::stream(s, indent + "  ", v.long_roboty);
    s << indent << "long_herrx: ";
    Printer<float>::stream(s, indent + "  ", v.long_herrx);
    s << indent << "long_herry: ";
    Printer<float>::stream(s, indent + "  ", v.long_herry);
    s << indent << "tras_herrx: ";
    Printer<float>::stream(s, indent + "  ", v.tras_herrx);
    s << indent << "tras_herry: ";
    Printer<float>::stream(s, indent + "  ", v.tras_herry);
    s << indent << "long_camx: ";
    Printer<float>::stream(s, indent + "  ", v.long_camx);
    s << indent << "long_camy: ";
    Printer<float>::stream(s, indent + "  ", v.long_camy);
    s << indent << "tras_camx: ";
    Printer<float>::stream(s, indent + "  ", v.tras_camx);
    s << indent << "tras_camy: ";
    Printer<float>::stream(s, indent + "  ", v.tras_camy);
    s << indent << "long_areax: ";
    Printer<float>::stream(s, indent + "  ", v.long_areax);
    s << indent << "long_areay: ";
    Printer<float>::stream(s, indent + "  ", v.long_areay);
    s << indent << "zoneh0: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zoneh0);
    s << indent << "zoneh90: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zoneh90);
    s << indent << "zoneh180: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zoneh180);
    s << indent << "zoneh270: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zoneh270);
    s << indent << "zonec0: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zonec0);
    s << indent << "zonec90: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zonec90);
    s << indent << "zonec180: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zonec180);
    s << indent << "zonec270: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zonec270);
    s << indent << "path_tray0[]" << std::endl;
    for (size_t i = 0; i < v.path_tray0.size(); ++i)
    {
      s << indent << "  path_tray0[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_tray0[i]);
    }
    s << indent << "path_tray90[]" << std::endl;
    for (size_t i = 0; i < v.path_tray90.size(); ++i)
    {
      s << indent << "  path_tray90[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_tray90[i]);
    }
    s << indent << "path_tray180[]" << std::endl;
    for (size_t i = 0; i < v.path_tray180.size(); ++i)
    {
      s << indent << "  path_tray180[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_tray180[i]);
    }
    s << indent << "path_tray270[]" << std::endl;
    for (size_t i = 0; i < v.path_tray270.size(); ++i)
    {
      s << indent << "  path_tray270[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.path_tray270[i]);
    }
    s << indent << "zone_rot: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.zone_rot);
    s << indent << "defecto_i: ";
    s << std::endl;
    Printer< ::irobot_fcpp_simul::defecto_<ContainerAllocator> >::stream(s, indent + "  ", v.defecto_i);
    s << indent << "poly_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.poly_i);
    s << indent << "n_defectos: ";
    Printer<int32_t>::stream(s, indent + "  ", v.n_defectos);
    s << indent << "defect_i_paths[]" << std::endl;
    for (size_t i = 0; i < v.defect_i_paths.size(); ++i)
    {
      s << indent << "  defect_i_paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.defect_i_paths[i]);
    }
    s << indent << "inspection_i_paths[]" << std::endl;
    for (size_t i = 0; i < v.inspection_i_paths.size(); ++i)
    {
      s << indent << "  inspection_i_paths[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PoseArray_<ContainerAllocator> >::stream(s, indent + "    ", v.inspection_i_paths[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IROBOT_FCPP_SIMUL_MESSAGE_IROBOT_IR_DATARESPONSE_H
